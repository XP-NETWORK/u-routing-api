import hre from 'hardhat';
import { Erc20__factory } from '../../lib/types/ext';
const WHALES = [
    '0xBE0eB53F46cd790Cd13851d5EFf43D12404d33E8',
    '0x6555e1cc97d3cba6eaddebbcd7ca51d75771e0b8',
    '0x08638ef1a205be6762a8b935f5da9b700cf7322c',
    '0xe8e8f41ed29e46f34e206d7d2a7d6f735a3ff2cb',
    '0x72a53cdbbcc1b9efa39c834a540550e23463aacb',
    '0xbebc44782c7db0a1a60cb6fe97d0b483032ff1c7',
    '0x40ec5b33f54e0e8a33a975908c5ba1c14e5bbbdf',
    '0x8eb8a3b98659cce290402893d0123abb75e3ab28',
    '0x1e3d6eab4bcf24bcd04721caa11c478a2e59852d',
    '0x28C6c06298d514Db089934071355E5743bf21d60',
    '0xF977814e90dA44bFA03b6295A0616a897441aceC',
    '0x5d3a536e4d6dbd6114cc1ead35777bab948e3643',
    '0x2775b1c75658be0f640272ccb8c72ac986009e38',
    '0x28c6c06298d514db089934071355e5743bf21d60',
    '0x47ac0fb4f2d84898e4d9e7b4dab3c24507a6d503',
    '0x06601571aa9d3e8f5f7cdd5b993192618964bab5',
    '0x171d311eAcd2206d21Cb462d661C33F0eddadC03',
];
const { ethers } = hre;
export const resetAndFundAtBlock = async (alice, blockNumber, currencyAmounts) => {
    await hre.network.provider.request({
        method: 'hardhat_reset',
        params: [
            {
                forking: {
                    jsonRpcUrl: process.env.ARCHIVE_NODE_RPC,
                    blockNumber,
                },
            },
        ],
    });
    for (const whale of WHALES) {
        await hre.network.provider.request({
            method: 'hardhat_impersonateAccount',
            params: [whale],
        });
    }
    for (const currencyAmount of currencyAmounts) {
        const currency = currencyAmount.currency;
        const amount = currencyAmount.toExact();
        if (currency.isNative) {
            // Requested funding was for ETH. Hardhat prefunds Alice with 1000 Eth.
            return alice;
        }
        for (let i = 0; i < WHALES.length; i++) {
            const whale = WHALES[i];
            const whaleAccount = ethers.provider.getSigner(whale);
            try {
                // Send native ETH from hardhat alice test address, so that whale accounts have sufficient ETH to pay for gas
                await alice.sendTransaction({
                    to: whale,
                    value: ethers.utils.parseEther('0.1'), // Sends exactly 0.1 ether
                });
                const whaleToken = Erc20__factory.connect(currency.wrapped.address, whaleAccount);
                await whaleToken.transfer(alice.address, ethers.utils.parseUnits(amount, currency.decimals));
                break;
            }
            catch (err) {
                if (i == WHALES.length - 1) {
                    throw new Error(`Could not fund ${amount} ${currency.symbol} from any whales. Original error ${JSON.stringify(err)}`);
                }
            }
        }
    }
    return alice;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ya0FuZEZ1bmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90ZXN0L3V0aWxzL2ZvcmtBbmRGdW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sR0FBRyxNQUFNLFNBQVMsQ0FBQTtBQUN6QixPQUFPLEVBQVMsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUE7QUFFM0QsTUFBTSxNQUFNLEdBQUc7SUFDYiw0Q0FBNEM7SUFDNUMsNENBQTRDO0lBQzVDLDRDQUE0QztJQUM1Qyw0Q0FBNEM7SUFDNUMsNENBQTRDO0lBQzVDLDRDQUE0QztJQUM1Qyw0Q0FBNEM7SUFDNUMsNENBQTRDO0lBQzVDLDRDQUE0QztJQUM1Qyw0Q0FBNEM7SUFDNUMsNENBQTRDO0lBQzVDLDRDQUE0QztJQUM1Qyw0Q0FBNEM7SUFDNUMsNENBQTRDO0lBQzVDLDRDQUE0QztJQUM1Qyw0Q0FBNEM7SUFDNUMsNENBQTRDO0NBQzdDLENBQUE7QUFFRCxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFBO0FBRXRCLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLEtBQUssRUFDdEMsS0FBd0IsRUFDeEIsV0FBbUIsRUFDbkIsZUFBMkMsRUFDZixFQUFFO0lBQzlCLE1BQU0sR0FBRyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO1FBQ2pDLE1BQU0sRUFBRSxlQUFlO1FBQ3ZCLE1BQU0sRUFBRTtZQUNOO2dCQUNFLE9BQU8sRUFBRTtvQkFDUCxVQUFVLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0I7b0JBQ3hDLFdBQVc7aUJBQ1o7YUFDRjtTQUNGO0tBQ0YsQ0FBQyxDQUFBO0lBRUYsS0FBSyxNQUFNLEtBQUssSUFBSSxNQUFNLEVBQUU7UUFDMUIsTUFBTSxHQUFHLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7WUFDakMsTUFBTSxFQUFFLDRCQUE0QjtZQUNwQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUM7U0FDaEIsQ0FBQyxDQUFBO0tBQ0g7SUFFRCxLQUFLLE1BQU0sY0FBYyxJQUFJLGVBQWUsRUFBRTtRQUM1QyxNQUFNLFFBQVEsR0FBRyxjQUFjLENBQUMsUUFBUSxDQUFBO1FBQ3hDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUV2QyxJQUFJLFFBQVEsQ0FBQyxRQUFRLEVBQUU7WUFDckIsdUVBQXVFO1lBQ3ZFLE9BQU8sS0FBSyxDQUFBO1NBQ2I7UUFFRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN0QyxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDdkIsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUE7WUFDckQsSUFBSTtnQkFDRiw2R0FBNkc7Z0JBQzdHLE1BQU0sS0FBSyxDQUFDLGVBQWUsQ0FBQztvQkFDMUIsRUFBRSxFQUFFLEtBQUs7b0JBQ1QsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFLDBCQUEwQjtpQkFDbEUsQ0FBQyxDQUFBO2dCQUVGLE1BQU0sVUFBVSxHQUFVLGNBQWMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUE7Z0JBRXhGLE1BQU0sVUFBVSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQTtnQkFFNUYsTUFBSzthQUNOO1lBQUMsT0FBTyxHQUFHLEVBQUU7Z0JBQ1osSUFBSSxDQUFDLElBQUksTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7b0JBQzFCLE1BQU0sSUFBSSxLQUFLLENBQ2Isa0JBQWtCLE1BQU0sSUFBSSxRQUFRLENBQUMsTUFBTSxvQ0FBb0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUNyRyxDQUFBO2lCQUNGO2FBQ0Y7U0FDRjtLQUNGO0lBRUQsT0FBTyxLQUFLLENBQUE7QUFDZCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTaWduZXJXaXRoQWRkcmVzcyB9IGZyb20gJ0Bub21pY2xhYnMvaGFyZGhhdC1ldGhlcnMvc2lnbmVycydcbmltcG9ydCB7IEN1cnJlbmN5LCBDdXJyZW5jeUFtb3VudCB9IGZyb20gJ0B1bmlzd2FwL3Nkay1jb3JlJ1xuaW1wb3J0IGhyZSBmcm9tICdoYXJkaGF0J1xuaW1wb3J0IHsgRXJjMjAsIEVyYzIwX19mYWN0b3J5IH0gZnJvbSAnLi4vLi4vbGliL3R5cGVzL2V4dCdcblxuY29uc3QgV0hBTEVTID0gW1xuICAnMHhCRTBlQjUzRjQ2Y2Q3OTBDZDEzODUxZDVFRmY0M0QxMjQwNGQzM0U4JyxcbiAgJzB4NjU1NWUxY2M5N2QzY2JhNmVhZGRlYmJjZDdjYTUxZDc1NzcxZTBiOCcsXG4gICcweDA4NjM4ZWYxYTIwNWJlNjc2MmE4YjkzNWY1ZGE5YjcwMGNmNzMyMmMnLFxuICAnMHhlOGU4ZjQxZWQyOWU0NmYzNGUyMDZkN2QyYTdkNmY3MzVhM2ZmMmNiJyxcbiAgJzB4NzJhNTNjZGJiY2MxYjllZmEzOWM4MzRhNTQwNTUwZTIzNDYzYWFjYicsXG4gICcweGJlYmM0NDc4MmM3ZGIwYTFhNjBjYjZmZTk3ZDBiNDgzMDMyZmYxYzcnLFxuICAnMHg0MGVjNWIzM2Y1NGUwZThhMzNhOTc1OTA4YzViYTFjMTRlNWJiYmRmJyxcbiAgJzB4OGViOGEzYjk4NjU5Y2NlMjkwNDAyODkzZDAxMjNhYmI3NWUzYWIyOCcsXG4gICcweDFlM2Q2ZWFiNGJjZjI0YmNkMDQ3MjFjYWExMWM0NzhhMmU1OTg1MmQnLFxuICAnMHgyOEM2YzA2Mjk4ZDUxNERiMDg5OTM0MDcxMzU1RTU3NDNiZjIxZDYwJyxcbiAgJzB4Rjk3NzgxNGU5MGRBNDRiRkEwM2I2Mjk1QTA2MTZhODk3NDQxYWNlQycsXG4gICcweDVkM2E1MzZlNGQ2ZGJkNjExNGNjMWVhZDM1Nzc3YmFiOTQ4ZTM2NDMnLFxuICAnMHgyNzc1YjFjNzU2NThiZTBmNjQwMjcyY2NiOGM3MmFjOTg2MDA5ZTM4JyxcbiAgJzB4MjhjNmMwNjI5OGQ1MTRkYjA4OTkzNDA3MTM1NWU1NzQzYmYyMWQ2MCcsXG4gICcweDQ3YWMwZmI0ZjJkODQ4OThlNGQ5ZTdiNGRhYjNjMjQ1MDdhNmQ1MDMnLFxuICAnMHgwNjYwMTU3MWFhOWQzZThmNWY3Y2RkNWI5OTMxOTI2MTg5NjRiYWI1JyxcbiAgJzB4MTcxZDMxMWVBY2QyMjA2ZDIxQ2I0NjJkNjYxQzMzRjBlZGRhZEMwMycsXG5dXG5cbmNvbnN0IHsgZXRoZXJzIH0gPSBocmVcblxuZXhwb3J0IGNvbnN0IHJlc2V0QW5kRnVuZEF0QmxvY2sgPSBhc3luYyAoXG4gIGFsaWNlOiBTaWduZXJXaXRoQWRkcmVzcyxcbiAgYmxvY2tOdW1iZXI6IG51bWJlcixcbiAgY3VycmVuY3lBbW91bnRzOiBDdXJyZW5jeUFtb3VudDxDdXJyZW5jeT5bXVxuKTogUHJvbWlzZTxTaWduZXJXaXRoQWRkcmVzcz4gPT4ge1xuICBhd2FpdCBocmUubmV0d29yay5wcm92aWRlci5yZXF1ZXN0KHtcbiAgICBtZXRob2Q6ICdoYXJkaGF0X3Jlc2V0JyxcbiAgICBwYXJhbXM6IFtcbiAgICAgIHtcbiAgICAgICAgZm9ya2luZzoge1xuICAgICAgICAgIGpzb25ScGNVcmw6IHByb2Nlc3MuZW52LkFSQ0hJVkVfTk9ERV9SUEMsXG4gICAgICAgICAgYmxvY2tOdW1iZXIsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIF0sXG4gIH0pXG5cbiAgZm9yIChjb25zdCB3aGFsZSBvZiBXSEFMRVMpIHtcbiAgICBhd2FpdCBocmUubmV0d29yay5wcm92aWRlci5yZXF1ZXN0KHtcbiAgICAgIG1ldGhvZDogJ2hhcmRoYXRfaW1wZXJzb25hdGVBY2NvdW50JyxcbiAgICAgIHBhcmFtczogW3doYWxlXSxcbiAgICB9KVxuICB9XG5cbiAgZm9yIChjb25zdCBjdXJyZW5jeUFtb3VudCBvZiBjdXJyZW5jeUFtb3VudHMpIHtcbiAgICBjb25zdCBjdXJyZW5jeSA9IGN1cnJlbmN5QW1vdW50LmN1cnJlbmN5XG4gICAgY29uc3QgYW1vdW50ID0gY3VycmVuY3lBbW91bnQudG9FeGFjdCgpXG5cbiAgICBpZiAoY3VycmVuY3kuaXNOYXRpdmUpIHtcbiAgICAgIC8vIFJlcXVlc3RlZCBmdW5kaW5nIHdhcyBmb3IgRVRILiBIYXJkaGF0IHByZWZ1bmRzIEFsaWNlIHdpdGggMTAwMCBFdGguXG4gICAgICByZXR1cm4gYWxpY2VcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IFdIQUxFUy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qgd2hhbGUgPSBXSEFMRVNbaV1cbiAgICAgIGNvbnN0IHdoYWxlQWNjb3VudCA9IGV0aGVycy5wcm92aWRlci5nZXRTaWduZXIod2hhbGUpXG4gICAgICB0cnkge1xuICAgICAgICAvLyBTZW5kIG5hdGl2ZSBFVEggZnJvbSBoYXJkaGF0IGFsaWNlIHRlc3QgYWRkcmVzcywgc28gdGhhdCB3aGFsZSBhY2NvdW50cyBoYXZlIHN1ZmZpY2llbnQgRVRIIHRvIHBheSBmb3IgZ2FzXG4gICAgICAgIGF3YWl0IGFsaWNlLnNlbmRUcmFuc2FjdGlvbih7XG4gICAgICAgICAgdG86IHdoYWxlLFxuICAgICAgICAgIHZhbHVlOiBldGhlcnMudXRpbHMucGFyc2VFdGhlcignMC4xJyksIC8vIFNlbmRzIGV4YWN0bHkgMC4xIGV0aGVyXG4gICAgICAgIH0pXG5cbiAgICAgICAgY29uc3Qgd2hhbGVUb2tlbjogRXJjMjAgPSBFcmMyMF9fZmFjdG9yeS5jb25uZWN0KGN1cnJlbmN5LndyYXBwZWQuYWRkcmVzcywgd2hhbGVBY2NvdW50KVxuXG4gICAgICAgIGF3YWl0IHdoYWxlVG9rZW4udHJhbnNmZXIoYWxpY2UuYWRkcmVzcywgZXRoZXJzLnV0aWxzLnBhcnNlVW5pdHMoYW1vdW50LCBjdXJyZW5jeS5kZWNpbWFscykpXG5cbiAgICAgICAgYnJlYWtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBpZiAoaSA9PSBXSEFMRVMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIGBDb3VsZCBub3QgZnVuZCAke2Ftb3VudH0gJHtjdXJyZW5jeS5zeW1ib2x9IGZyb20gYW55IHdoYWxlcy4gT3JpZ2luYWwgZXJyb3IgJHtKU09OLnN0cmluZ2lmeShlcnIpfWBcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gYWxpY2Vcbn1cbiJdfQ==