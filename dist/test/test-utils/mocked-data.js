import { encodeSqrtRatioX96, Pool } from '@uniswap/v3-sdk';
import { FeeAmount } from '../utils/ticks';
import { DAI_MAINNET as DAI, USDC_MAINNET as USDC, USDT_MAINNET as USDT, WRAPPED_NATIVE_CURRENCY, } from '@uniswap/smart-order-router/build/main/index';
import _ from 'lodash';
import { ChainId, Ether, WETH9 } from '@uniswap/sdk-core';
import { DAI_ON, USDC_ON, USDT_ON } from '../utils/tokens';
import { WBTC_MAINNET } from '@uniswap/smart-order-router';
export const USDC_DAI_LOW = new Pool(USDC, DAI, FeeAmount.LOW, encodeSqrtRatioX96(1, 1), 10, 0);
export const USDC_DAI_MEDIUM = new Pool(USDC, DAI, FeeAmount.MEDIUM, encodeSqrtRatioX96(1, 1), 8, 0);
export const USDC_WETH_LOW = new Pool(USDC, WRAPPED_NATIVE_CURRENCY[1], FeeAmount.LOW, encodeSqrtRatioX96(1, 1), 500, 0);
export const WETH9_USDT_LOW = new Pool(WRAPPED_NATIVE_CURRENCY[1], USDT, FeeAmount.LOW, encodeSqrtRatioX96(1, 1), 200, 0);
export const DAI_USDT_LOW = new Pool(DAI, USDT, FeeAmount.LOW, encodeSqrtRatioX96(1, 1), 10, 0);
export const SUPPORTED_POOLS = [USDC_DAI_LOW, USDC_DAI_MEDIUM, USDC_WETH_LOW, WETH9_USDT_LOW, DAI_USDT_LOW];
export const buildMockV3PoolAccessor = (pools) => {
    return {
        getAllPools: () => pools,
        getPoolByAddress: (address) => _.find(pools, (p) => Pool.getAddress(p.token0, p.token1, p.fee).toLowerCase() == address.toLowerCase()),
        getPool: (tokenA, tokenB, fee) => _.find(pools, (p) => Pool.getAddress(p.token0, p.token1, p.fee) == Pool.getAddress(tokenA, tokenB, fee)),
    };
};
export const PORTION_BIPS = 12;
export const PORTION_RECIPIENT = '0xd8da6bf26964af9d7eed9e03e53415d37aa96045';
export const PORTION_TYPE = 'flat';
export const FLAT_PORTION = {
    bips: PORTION_BIPS,
    recipient: PORTION_RECIPIENT,
    type: PORTION_TYPE,
};
export const GREENLIST_TOKEN_PAIRS = [
    [Ether.onChain(ChainId.MAINNET), USDC_ON(ChainId.MAINNET)],
    [WETH9[ChainId.MAINNET], USDT_ON(ChainId.MAINNET)],
    [DAI_ON(ChainId.MAINNET), WBTC_MAINNET],
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9ja2VkLWRhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90ZXN0L3Rlc3QtdXRpbHMvbW9ja2VkLWRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGtCQUFrQixFQUFFLElBQUksRUFBRSxNQUFNLGlCQUFpQixDQUFBO0FBQzFELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQTtBQUMxQyxPQUFPLEVBQ0wsV0FBVyxJQUFJLEdBQUcsRUFDbEIsWUFBWSxJQUFJLElBQUksRUFDcEIsWUFBWSxJQUFJLElBQUksRUFDcEIsdUJBQXVCLEdBQ3hCLE1BQU0sOENBQThDLENBQUE7QUFFckQsT0FBTyxDQUFDLE1BQU0sUUFBUSxDQUFBO0FBQ3RCLE9BQU8sRUFBRSxPQUFPLEVBQVksS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBQ25FLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGlCQUFpQixDQUFBO0FBQzFELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQTtBQUUxRCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxTQUFTLENBQUMsR0FBRyxFQUFFLGtCQUFrQixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFDL0YsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsU0FBUyxDQUFDLE1BQU0sRUFBRSxrQkFBa0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQ3BHLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxJQUFJLElBQUksQ0FDbkMsSUFBSSxFQUNKLHVCQUF1QixDQUFDLENBQUMsQ0FBRSxFQUMzQixTQUFTLENBQUMsR0FBRyxFQUNiLGtCQUFrQixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFDeEIsR0FBRyxFQUNILENBQUMsQ0FDRixDQUFBO0FBQ0QsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLElBQUksSUFBSSxDQUNwQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUUsRUFDM0IsSUFBSSxFQUNKLFNBQVMsQ0FBQyxHQUFHLEVBQ2Isa0JBQWtCLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUN4QixHQUFHLEVBQ0gsQ0FBQyxDQUNGLENBQUE7QUFDRCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsR0FBRyxFQUFFLGtCQUFrQixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFDL0YsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFXLENBQUMsWUFBWSxFQUFFLGVBQWUsRUFBRSxhQUFhLEVBQUUsY0FBYyxFQUFFLFlBQVksQ0FBQyxDQUFBO0FBRW5ILE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFzQyxDQUFDLEtBQWEsRUFBRSxFQUFFO0lBQzFGLE9BQU87UUFDTCxXQUFXLEVBQUUsR0FBRyxFQUFFLENBQUMsS0FBSztRQUN4QixnQkFBZ0IsRUFBRSxDQUFDLE9BQWUsRUFBRSxFQUFFLENBQ3BDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsV0FBVyxFQUFFLElBQUksT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3pHLE9BQU8sRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FDL0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7S0FDM0csQ0FBQTtBQUNILENBQUMsQ0FBQTtBQVFELE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxFQUFFLENBQUE7QUFDOUIsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsNENBQTRDLENBQUE7QUFDN0UsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQTtBQUVsQyxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQVk7SUFDbkMsSUFBSSxFQUFFLFlBQVk7SUFDbEIsU0FBUyxFQUFFLGlCQUFpQjtJQUM1QixJQUFJLEVBQUUsWUFBWTtDQUNuQixDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQWdDO0lBQ2hFLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMxRCxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNsRCxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsWUFBWSxDQUFDO0NBQ3hDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlbmNvZGVTcXJ0UmF0aW9YOTYsIFBvb2wgfSBmcm9tICdAdW5pc3dhcC92My1zZGsnXG5pbXBvcnQgeyBGZWVBbW91bnQgfSBmcm9tICcuLi91dGlscy90aWNrcydcbmltcG9ydCB7XG4gIERBSV9NQUlOTkVUIGFzIERBSSxcbiAgVVNEQ19NQUlOTkVUIGFzIFVTREMsXG4gIFVTRFRfTUFJTk5FVCBhcyBVU0RULFxuICBXUkFQUEVEX05BVElWRV9DVVJSRU5DWSxcbn0gZnJvbSAnQHVuaXN3YXAvc21hcnQtb3JkZXItcm91dGVyL2J1aWxkL21haW4vaW5kZXgnXG5pbXBvcnQgeyBWM1Bvb2xBY2Nlc3NvciB9IGZyb20gJ0B1bmlzd2FwL3NtYXJ0LW9yZGVyLXJvdXRlci9idWlsZC9tYWluL3Byb3ZpZGVycy92My9wb29sLXByb3ZpZGVyJ1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJ1xuaW1wb3J0IHsgQ2hhaW5JZCwgQ3VycmVuY3ksIEV0aGVyLCBXRVRIOSB9IGZyb20gJ0B1bmlzd2FwL3Nkay1jb3JlJ1xuaW1wb3J0IHsgREFJX09OLCBVU0RDX09OLCBVU0RUX09OIH0gZnJvbSAnLi4vdXRpbHMvdG9rZW5zJ1xuaW1wb3J0IHsgV0JUQ19NQUlOTkVUIH0gZnJvbSAnQHVuaXN3YXAvc21hcnQtb3JkZXItcm91dGVyJ1xuXG5leHBvcnQgY29uc3QgVVNEQ19EQUlfTE9XID0gbmV3IFBvb2woVVNEQywgREFJLCBGZWVBbW91bnQuTE9XLCBlbmNvZGVTcXJ0UmF0aW9YOTYoMSwgMSksIDEwLCAwKVxuZXhwb3J0IGNvbnN0IFVTRENfREFJX01FRElVTSA9IG5ldyBQb29sKFVTREMsIERBSSwgRmVlQW1vdW50Lk1FRElVTSwgZW5jb2RlU3FydFJhdGlvWDk2KDEsIDEpLCA4LCAwKVxuZXhwb3J0IGNvbnN0IFVTRENfV0VUSF9MT1cgPSBuZXcgUG9vbChcbiAgVVNEQyxcbiAgV1JBUFBFRF9OQVRJVkVfQ1VSUkVOQ1lbMV0hLFxuICBGZWVBbW91bnQuTE9XLFxuICBlbmNvZGVTcXJ0UmF0aW9YOTYoMSwgMSksXG4gIDUwMCxcbiAgMFxuKVxuZXhwb3J0IGNvbnN0IFdFVEg5X1VTRFRfTE9XID0gbmV3IFBvb2woXG4gIFdSQVBQRURfTkFUSVZFX0NVUlJFTkNZWzFdISxcbiAgVVNEVCxcbiAgRmVlQW1vdW50LkxPVyxcbiAgZW5jb2RlU3FydFJhdGlvWDk2KDEsIDEpLFxuICAyMDAsXG4gIDBcbilcbmV4cG9ydCBjb25zdCBEQUlfVVNEVF9MT1cgPSBuZXcgUG9vbChEQUksIFVTRFQsIEZlZUFtb3VudC5MT1csIGVuY29kZVNxcnRSYXRpb1g5NigxLCAxKSwgMTAsIDApXG5leHBvcnQgY29uc3QgU1VQUE9SVEVEX1BPT0xTOiBQb29sW10gPSBbVVNEQ19EQUlfTE9XLCBVU0RDX0RBSV9NRURJVU0sIFVTRENfV0VUSF9MT1csIFdFVEg5X1VTRFRfTE9XLCBEQUlfVVNEVF9MT1ddXG5cbmV4cG9ydCBjb25zdCBidWlsZE1vY2tWM1Bvb2xBY2Nlc3NvcjogKHBvb2xzOiBQb29sW10pID0+IFYzUG9vbEFjY2Vzc29yID0gKHBvb2xzOiBQb29sW10pID0+IHtcbiAgcmV0dXJuIHtcbiAgICBnZXRBbGxQb29sczogKCkgPT4gcG9vbHMsXG4gICAgZ2V0UG9vbEJ5QWRkcmVzczogKGFkZHJlc3M6IHN0cmluZykgPT5cbiAgICAgIF8uZmluZChwb29scywgKHApID0+IFBvb2wuZ2V0QWRkcmVzcyhwLnRva2VuMCwgcC50b2tlbjEsIHAuZmVlKS50b0xvd2VyQ2FzZSgpID09IGFkZHJlc3MudG9Mb3dlckNhc2UoKSksXG4gICAgZ2V0UG9vbDogKHRva2VuQSwgdG9rZW5CLCBmZWUpID0+XG4gICAgICBfLmZpbmQocG9vbHMsIChwKSA9PiBQb29sLmdldEFkZHJlc3MocC50b2tlbjAsIHAudG9rZW4xLCBwLmZlZSkgPT0gUG9vbC5nZXRBZGRyZXNzKHRva2VuQSwgdG9rZW5CLCBmZWUpKSxcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBQb3J0aW9uID0ge1xuICBiaXBzOiBudW1iZXJcbiAgcmVjaXBpZW50OiBzdHJpbmdcbiAgdHlwZTogc3RyaW5nXG59XG5cbmV4cG9ydCBjb25zdCBQT1JUSU9OX0JJUFMgPSAxMlxuZXhwb3J0IGNvbnN0IFBPUlRJT05fUkVDSVBJRU5UID0gJzB4ZDhkYTZiZjI2OTY0YWY5ZDdlZWQ5ZTAzZTUzNDE1ZDM3YWE5NjA0NSdcbmV4cG9ydCBjb25zdCBQT1JUSU9OX1RZUEUgPSAnZmxhdCdcblxuZXhwb3J0IGNvbnN0IEZMQVRfUE9SVElPTjogUG9ydGlvbiA9IHtcbiAgYmlwczogUE9SVElPTl9CSVBTLFxuICByZWNpcGllbnQ6IFBPUlRJT05fUkVDSVBJRU5ULFxuICB0eXBlOiBQT1JUSU9OX1RZUEUsXG59XG5cbmV4cG9ydCBjb25zdCBHUkVFTkxJU1RfVE9LRU5fUEFJUlM6IEFycmF5PFtDdXJyZW5jeSwgQ3VycmVuY3ldPiA9IFtcbiAgW0V0aGVyLm9uQ2hhaW4oQ2hhaW5JZC5NQUlOTkVUKSwgVVNEQ19PTihDaGFpbklkLk1BSU5ORVQpXSxcbiAgW1dFVEg5W0NoYWluSWQuTUFJTk5FVF0sIFVTRFRfT04oQ2hhaW5JZC5NQUlOTkVUKV0sXG4gIFtEQUlfT04oQ2hhaW5JZC5NQUlOTkVUKSwgV0JUQ19NQUlOTkVUXSxcbl1cbiJdfQ==