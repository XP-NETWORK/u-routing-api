import AWS, { DynamoDB } from 'aws-sdk';
import DDBLocal from 'dynamodb-local';
import { deleteAllTables } from './dbSetup';
process.env.AWS_ACCESS_KEY_ID = 'myaccesskey';
process.env.AWS_SECRET_ACCESS_KEY = 'mysecretkey';
const dbPort = Number(process.env.DYNAMODB_LOCAL_PORT || 8000);
let dbInstance;
global['__DYNAMODB_LOCAL__'] = true;
export const mochaGlobalSetup = async () => {
    try {
        console.log('Starting DynamoDB');
        dbInstance = await DDBLocal.launch(dbPort, null);
        console.log('Started DynamoDB');
        const ddb = new DynamoDB({
            endpoint: `localhost:${dbPort}`,
            sslEnabled: false,
            region: 'local',
        });
        dbConnectionSetup();
        exportDDBInstance(ddb);
        await deleteAllTables();
    }
    catch (e) {
        console.log('Error instantiating DynamoDB', e);
    }
};
// Overrides the default config to use the local instance of DynamoDB in tests
export const dbConnectionSetup = () => {
    const config = AWS.config;
    const dynamoLocalPort = Number(process.env.DYNAMODB_LOCAL_PORT || 8000);
    config.endpoint = `localhost:${dynamoLocalPort}`;
    config.sslEnabled = false;
    config.region = 'local';
};
const exportDDBInstance = (ddb) => {
    ;
    global['__DYNAMODB_CLIENT__'] = ddb;
};
export const mochaGlobalTeardown = async () => {
    console.log('Stopping DynamoDB');
    if (dbInstance !== undefined) {
        await DDBLocal.stopChild(dbInstance);
    }
    console.log('Stopped DynamoDB');
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1vREJMb2NhbEZpeHR1cmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90ZXN0L21vY2hhL2R5bmFtb0RCTG9jYWxGaXh0dXJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sR0FBRyxFQUFFLEVBQUUsUUFBUSxFQUFFLE1BQU0sU0FBUyxDQUFBO0FBRXZDLE9BQU8sUUFBUSxNQUFNLGdCQUFnQixDQUFBO0FBQ3JDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFFM0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsR0FBRyxhQUFhLENBQUE7QUFDN0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsR0FBRyxhQUFhLENBQUE7QUFFakQsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLElBQUksSUFBSSxDQUFDLENBQUE7QUFFOUQsSUFBSSxVQUFvQyxDQUN2QztBQUFDLE1BQWMsQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLElBQUksQ0FBQTtBQUU3QyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxLQUFLLElBQUksRUFBRTtJQUN6QyxJQUFJO1FBQ0YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO1FBQ2hDLFVBQVUsR0FBRyxNQUFNLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFBO1FBQ2hELE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtRQUUvQixNQUFNLEdBQUcsR0FBRyxJQUFJLFFBQVEsQ0FBQztZQUN2QixRQUFRLEVBQUUsYUFBYSxNQUFNLEVBQUU7WUFDL0IsVUFBVSxFQUFFLEtBQUs7WUFDakIsTUFBTSxFQUFFLE9BQU87U0FDaEIsQ0FBQyxDQUFBO1FBRUYsaUJBQWlCLEVBQUUsQ0FBQTtRQUVuQixpQkFBaUIsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUV0QixNQUFNLGVBQWUsRUFBRSxDQUFBO0tBQ3hCO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDVixPQUFPLENBQUMsR0FBRyxDQUFDLDhCQUE4QixFQUFFLENBQUMsQ0FBQyxDQUFBO0tBQy9DO0FBQ0gsQ0FBQyxDQUFBO0FBRUQsOEVBQThFO0FBQzlFLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLEdBQUcsRUFBRTtJQUNwQyxNQUFNLE1BQU0sR0FBUSxHQUFHLENBQUMsTUFBTSxDQUFBO0lBRTlCLE1BQU0sZUFBZSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixJQUFJLElBQUksQ0FBQyxDQUFBO0lBQ3ZFLE1BQU0sQ0FBQyxRQUFRLEdBQUcsYUFBYSxlQUFlLEVBQUUsQ0FBQTtJQUNoRCxNQUFNLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQTtJQUN6QixNQUFNLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQTtBQUN6QixDQUFDLENBQUE7QUFFRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsR0FBYSxFQUFFLEVBQUU7SUFDMUMsQ0FBQztJQUFDLE1BQWMsQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLEdBQUcsQ0FBQTtBQUMvQyxDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxLQUFLLElBQUksRUFBRTtJQUM1QyxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUE7SUFDaEMsSUFBSSxVQUFVLEtBQUssU0FBUyxFQUFFO1FBQzVCLE1BQU0sUUFBUSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQTtLQUNyQztJQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtBQUNqQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQVdTLCB7IER5bmFtb0RCIH0gZnJvbSAnYXdzLXNkaydcbmltcG9ydCB7IENoaWxkUHJvY2VzcyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnXG5pbXBvcnQgRERCTG9jYWwgZnJvbSAnZHluYW1vZGItbG9jYWwnXG5pbXBvcnQgeyBkZWxldGVBbGxUYWJsZXMgfSBmcm9tICcuL2RiU2V0dXAnXG5cbnByb2Nlc3MuZW52LkFXU19BQ0NFU1NfS0VZX0lEID0gJ215YWNjZXNza2V5J1xucHJvY2Vzcy5lbnYuQVdTX1NFQ1JFVF9BQ0NFU1NfS0VZID0gJ215c2VjcmV0a2V5J1xuXG5jb25zdCBkYlBvcnQgPSBOdW1iZXIocHJvY2Vzcy5lbnYuRFlOQU1PREJfTE9DQUxfUE9SVCB8fCA4MDAwKVxuXG5sZXQgZGJJbnN0YW5jZTogQ2hpbGRQcm9jZXNzIHwgdW5kZWZpbmVkXG47KGdsb2JhbCBhcyBhbnkpWydfX0RZTkFNT0RCX0xPQ0FMX18nXSA9IHRydWVcblxuZXhwb3J0IGNvbnN0IG1vY2hhR2xvYmFsU2V0dXAgPSBhc3luYyAoKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc29sZS5sb2coJ1N0YXJ0aW5nIER5bmFtb0RCJylcbiAgICBkYkluc3RhbmNlID0gYXdhaXQgRERCTG9jYWwubGF1bmNoKGRiUG9ydCwgbnVsbClcbiAgICBjb25zb2xlLmxvZygnU3RhcnRlZCBEeW5hbW9EQicpXG5cbiAgICBjb25zdCBkZGIgPSBuZXcgRHluYW1vREIoe1xuICAgICAgZW5kcG9pbnQ6IGBsb2NhbGhvc3Q6JHtkYlBvcnR9YCxcbiAgICAgIHNzbEVuYWJsZWQ6IGZhbHNlLFxuICAgICAgcmVnaW9uOiAnbG9jYWwnLFxuICAgIH0pXG5cbiAgICBkYkNvbm5lY3Rpb25TZXR1cCgpXG5cbiAgICBleHBvcnREREJJbnN0YW5jZShkZGIpXG5cbiAgICBhd2FpdCBkZWxldGVBbGxUYWJsZXMoKVxuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5sb2coJ0Vycm9yIGluc3RhbnRpYXRpbmcgRHluYW1vREInLCBlKVxuICB9XG59XG5cbi8vIE92ZXJyaWRlcyB0aGUgZGVmYXVsdCBjb25maWcgdG8gdXNlIHRoZSBsb2NhbCBpbnN0YW5jZSBvZiBEeW5hbW9EQiBpbiB0ZXN0c1xuZXhwb3J0IGNvbnN0IGRiQ29ubmVjdGlvblNldHVwID0gKCkgPT4ge1xuICBjb25zdCBjb25maWc6IGFueSA9IEFXUy5jb25maWdcblxuICBjb25zdCBkeW5hbW9Mb2NhbFBvcnQgPSBOdW1iZXIocHJvY2Vzcy5lbnYuRFlOQU1PREJfTE9DQUxfUE9SVCB8fCA4MDAwKVxuICBjb25maWcuZW5kcG9pbnQgPSBgbG9jYWxob3N0OiR7ZHluYW1vTG9jYWxQb3J0fWBcbiAgY29uZmlnLnNzbEVuYWJsZWQgPSBmYWxzZVxuICBjb25maWcucmVnaW9uID0gJ2xvY2FsJ1xufVxuXG5jb25zdCBleHBvcnREREJJbnN0YW5jZSA9IChkZGI6IER5bmFtb0RCKSA9PiB7XG4gIDsoZ2xvYmFsIGFzIGFueSlbJ19fRFlOQU1PREJfQ0xJRU5UX18nXSA9IGRkYlxufVxuXG5leHBvcnQgY29uc3QgbW9jaGFHbG9iYWxUZWFyZG93biA9IGFzeW5jICgpID0+IHtcbiAgY29uc29sZS5sb2coJ1N0b3BwaW5nIER5bmFtb0RCJylcbiAgaWYgKGRiSW5zdGFuY2UgIT09IHVuZGVmaW5lZCkge1xuICAgIGF3YWl0IEREQkxvY2FsLnN0b3BDaGlsZChkYkluc3RhbmNlKVxuICB9XG4gIGNvbnNvbGUubG9nKCdTdG9wcGVkIER5bmFtb0RCJylcbn1cbiJdfQ==