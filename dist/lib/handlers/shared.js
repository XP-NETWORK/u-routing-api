import { ChainId, Percent } from '@uniswap/sdk-core';
import { CacheMode, LowerCaseStringArray, MapWithLowerCaseKey, } from '@uniswap/smart-order-router';
export const SECONDS_PER_BLOCK_BY_CHAIN_ID = {
    [ChainId.MAINNET]: 30,
};
export const DEFAULT_ROUTING_CONFIG_BY_CHAIN = (chainId) => {
    switch (chainId) {
        case ChainId.BASE:
        case ChainId.OPTIMISM:
            return {
                v2PoolSelection: {
                    topN: 3,
                    topNDirectSwaps: 1,
                    topNTokenInOut: 5,
                    topNSecondHop: 2,
                    topNWithEachBaseToken: 2,
                    topNWithBaseToken: 6,
                },
                v3PoolSelection: {
                    topN: 2,
                    topNDirectSwaps: 2,
                    topNTokenInOut: 2,
                    topNSecondHop: 1,
                    topNWithEachBaseToken: 3,
                    topNWithBaseToken: 3,
                },
                maxSwapsPerPath: 3,
                minSplits: 1,
                maxSplits: 7,
                distributionPercent: 10,
                forceCrossProtocol: false,
            };
        // Arbitrum calls have lower gas limits and tend to timeout more, which causes us to reduce the multicall
        // batch size and send more multicalls per quote. To reduce the amount of requests each quote sends, we
        // have to adjust the routing config so we explore fewer routes.
        case ChainId.ARBITRUM_ONE:
            return {
                v2PoolSelection: {
                    topN: 3,
                    topNDirectSwaps: 1,
                    topNTokenInOut: 5,
                    topNSecondHop: 2,
                    topNWithEachBaseToken: 2,
                    topNWithBaseToken: 6,
                },
                v3PoolSelection: {
                    topN: 2,
                    topNDirectSwaps: 2,
                    topNTokenInOut: 2,
                    topNSecondHop: 1,
                    topNWithEachBaseToken: 3,
                    topNWithBaseToken: 2,
                },
                maxSwapsPerPath: 2,
                minSplits: 1,
                maxSplits: 7,
                distributionPercent: 25,
                forceCrossProtocol: false,
            };
        default:
            return {
                v2PoolSelection: {
                    topN: 3,
                    topNDirectSwaps: 1,
                    topNTokenInOut: 5,
                    topNSecondHop: 2,
                    tokensToAvoidOnSecondHops: new LowerCaseStringArray('0xd46ba6d942050d489dbd938a2c909a5d5039a161' // AMPL on Mainnet
                    ),
                    topNWithEachBaseToken: 2,
                    topNWithBaseToken: 6,
                },
                v3PoolSelection: {
                    topN: 2,
                    topNDirectSwaps: 2,
                    topNTokenInOut: 3,
                    topNSecondHop: 1,
                    topNSecondHopForTokenAddress: new MapWithLowerCaseKey([
                        ['0x5f98805a4e8be255a32880fdec7f6728c6568ba0', 2], // LUSD
                    ]),
                    topNWithEachBaseToken: 3,
                    topNWithBaseToken: 5,
                },
                maxSwapsPerPath: 3,
                minSplits: 1,
                maxSplits: 7,
                distributionPercent: 5,
                forceCrossProtocol: false,
            };
    }
};
export const QUOTE_SPEED_CONFIG = {
    standard: {},
    fast: {
        v2PoolSelection: {
            topN: 1,
            topNDirectSwaps: 1,
            topNTokenInOut: 1,
            topNSecondHop: 0,
            topNWithEachBaseToken: 1,
            topNWithBaseToken: 1,
        },
        v3PoolSelection: {
            topN: 1,
            topNDirectSwaps: 1,
            topNTokenInOut: 1,
            topNSecondHop: 0,
            topNWithEachBaseToken: 1,
            topNWithBaseToken: 1,
        },
        maxSwapsPerPath: 2,
        maxSplits: 1,
        distributionPercent: 100,
        writeToCachedRoutes: false,
    },
};
export const INTENT_SPECIFIC_CONFIG = {
    caching: {
        // When the intent is to create a cache entry, we will use cachedRoutes with Tapcompare to track accuracy
        useCachedRoutes: true,
        overwriteCacheMode: CacheMode.Tapcompare,
        // This optimistic=false is *super* important to avoid an infinite loop of caching quotes calling themselves
        optimisticCachedRoutes: false,
    },
    quote: {
        // When the intent is to get a quote, we should use the cache and optimistic cached routes
        useCachedRoutes: true,
        optimisticCachedRoutes: true,
    },
    swap: {
        // When the intent is to prepare the swap, we can use cache, but it should not be optimistic
        useCachedRoutes: true,
        optimisticCachedRoutes: false,
    },
    pricing: {
        // When the intent is to get pricing, we should use the cache and optimistic cached routes
        useCachedRoutes: true,
        optimisticCachedRoutes: true,
    },
};
export const FEE_ON_TRANSFER_SPECIFIC_CONFIG = (enableFeeOnTransferFeeFetching) => {
    return {
        enableFeeOnTransferFeeFetching: enableFeeOnTransferFeeFetching,
    };
};
export function parseSlippageTolerance(slippageTolerance) {
    const slippagePer10k = Math.round(parseFloat(slippageTolerance) * 100);
    return new Percent(slippagePer10k, 10000);
}
export function parseDeadline(deadline) {
    return Math.floor(Date.now() / 1000) + parseInt(deadline);
}
export function parsePortionPercent(portionBips) {
    return new Percent(portionBips, 10000);
}
export function parseFeeOptions(portionBips, portionRecipient) {
    if (!portionBips || !portionRecipient) {
        return undefined;
    }
    return { fee: parsePortionPercent(portionBips), recipient: portionRecipient };
}
export function parseFlatFeeOptions(portionAmount, portionRecipient) {
    if (!portionAmount || !portionRecipient) {
        return undefined;
    }
    return { amount: portionAmount, recipient: portionRecipient };
}
export function populateFeeOptions(type, portionBips, portionRecipient, portionAmount) {
    switch (type) {
        case 'exactIn':
            const feeOptions = parseFeeOptions(portionBips, portionRecipient);
            return { fee: feeOptions };
        case 'exactOut':
            const flatFeeOptions = parseFlatFeeOptions(portionAmount, portionRecipient);
            return { flatFee: flatFeeOptions };
        default:
            return undefined;
    }
}
export function computePortionAmount(currencyOut, portionBips) {
    if (!portionBips) {
        return undefined;
    }
    return currencyOut.multiply(parsePortionPercent(portionBips)).quotient.toString();
}
export const DEFAULT_DEADLINE = 600; // 10 minutes
export const UNISWAP_DOT_ETH_ADDRESS = '0x1a9C8182C09F50C8318d769245beA52c32BE35BC';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2hhbmRsZXJzL3NoYXJlZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUE0QixPQUFPLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUM5RSxPQUFPLEVBRUwsU0FBUyxFQUNULG9CQUFvQixFQUNwQixtQkFBbUIsR0FFcEIsTUFBTSw2QkFBNkIsQ0FBQTtBQUlwQyxNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FBc0M7SUFDOUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRTtDQUN0QixDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sK0JBQStCLEdBQUcsQ0FBQyxPQUFnQixFQUFxQixFQUFFO0lBQ3JGLFFBQVEsT0FBTyxFQUFFO1FBQ2YsS0FBSyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQ2xCLEtBQUssT0FBTyxDQUFDLFFBQVE7WUFDbkIsT0FBTztnQkFDTCxlQUFlLEVBQUU7b0JBQ2YsSUFBSSxFQUFFLENBQUM7b0JBQ1AsZUFBZSxFQUFFLENBQUM7b0JBQ2xCLGNBQWMsRUFBRSxDQUFDO29CQUNqQixhQUFhLEVBQUUsQ0FBQztvQkFDaEIscUJBQXFCLEVBQUUsQ0FBQztvQkFDeEIsaUJBQWlCLEVBQUUsQ0FBQztpQkFDckI7Z0JBQ0QsZUFBZSxFQUFFO29CQUNmLElBQUksRUFBRSxDQUFDO29CQUNQLGVBQWUsRUFBRSxDQUFDO29CQUNsQixjQUFjLEVBQUUsQ0FBQztvQkFDakIsYUFBYSxFQUFFLENBQUM7b0JBQ2hCLHFCQUFxQixFQUFFLENBQUM7b0JBQ3hCLGlCQUFpQixFQUFFLENBQUM7aUJBQ3JCO2dCQUNELGVBQWUsRUFBRSxDQUFDO2dCQUNsQixTQUFTLEVBQUUsQ0FBQztnQkFDWixTQUFTLEVBQUUsQ0FBQztnQkFDWixtQkFBbUIsRUFBRSxFQUFFO2dCQUN2QixrQkFBa0IsRUFBRSxLQUFLO2FBQzFCLENB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aW1wb3J0IHsgQ2hhaW5JZCwgQ3VycmVuY3ksIEN1cnJlbmN5QW1vdW50LCBQZXJjZW50IH0gZnJvbSAnQHVuaXN3YXAvc2RrLWNvcmUnXG5pbXBvcnQge1xuICBBbHBoYVJvdXRlckNvbmZpZyxcbiAgQ2FjaGVNb2RlLFxuICBMb3dlckNhc2VTdHJpbmdBcnJheSxcbiAgTWFwV2l0aExvd2VyQ2FzZUtleSxcbiAgUHJvdG9jb2xQb29sU2VsZWN0aW9uLFxufSBmcm9tICdAdW5pc3dhcC9zbWFydC1vcmRlci1yb3V0ZXInXG5pbXBvcnQgeyBGZWVPcHRpb25zIH0gZnJvbSAnQHVuaXN3YXAvdjMtc2RrJ1xuaW1wb3J0IHsgRmxhdEZlZU9wdGlvbnMgfSBmcm9tICdAdW5pc3dhcC91bml2ZXJzYWwtcm91dGVyLXNkaydcblxuZXhwb3J0IGNvbnN0IFNFQ09ORFNfUEVSX0JMT0NLX0JZX0NIQUlOX0lEOiB7IFtjaGFpbklkIGluIENoYWluSWRdPzogbnVtYmVyIH0gPSB7XG4gIFtDaGFpbklkLk1BSU5ORVRdOiAzMCxcbn1cblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfUk9VVElOR19DT05GSUdfQllfQ0hBSU4gPSAoY2hhaW5JZDogQ2hhaW5JZCk6IEFscGhhUm91dGVyQ29uZmlnID0+IHtcbiAgc3dpdGNoIChjaGFpbklkKSB7XG4gICAgY2FzZSBDaGFpbklkLkJBU0U6XG4gICAgY2FzZSBDaGFpbklkLk9QVElNSVNNOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdjJQb29sU2VsZWN0aW9uOiB7XG4gICAgICAgICAgdG9wTjogMyxcbiAgICAgICAgICB0b3BORGlyZWN0U3dhcHM6IDEsXG4gICAgICAgICAgdG9wTlRva2VuSW5PdXQ6IDUsXG4gICAgICAgICAgdG9wTlNlY29uZEhvcDogMixcbiAgICAgICAgICB0b3BOV2l0aEVhY2hCYXNlVG9rZW46IDIsXG4gICAgICAgICAgdG9wTldpdGhCYXNlVG9rZW46IDYsXG4gICAgICAgIH0sXG4gICAgICAgIHYzUG9vbFNlbGVjdGlvbjoge1xuICAgICAgICAgIHRvcE46IDIsXG4gICAgICAgICAgdG9wTkRpcmVjdFN3YXBzOiAyLFxuICAgICAgICAgIHRvcE5Ub2tlbkluT3V0OiAyLFxuICAgICAgICAgIHRvcE5TZWNvbmRIb3A6IDEsXG4gICAgICAgICAgdG9wTldpdGhFYWNoQmFzZVRva2VuOiAzLFxuICAgICAgICAgIHRvcE5XaXRoQmFzZVRva2VuOiAzLFxuICAgICAgICB9LFxuICAgICAgICBtYXhTd2Fwc1BlclBhdGg6IDMsXG4gICAgICAgIG1pblNwbGl0czogMSxcbiAgICAgICAgbWF4U3BsaXRzOiA3LFxuICAgICAgICBkaXN0cmlidXRpb25QZXJjZW50OiAxMCxcbiAgICAgICAgZm9yY2VDcm9zc1Byb3RvY29sOiBmYWxzZSxcbiAgICAgIH1cbiAgICAvLyBBcmJpdHJ1bSBjYWxscyBoYXZlIGxvd2VyIGdhcyBsaW1pdHMgYW5kIHRlbmQgdG8gdGltZW91dCBtb3JlLCB3aGljaCBjYXVzZXMgdXMgdG8gcmVkdWNlIHRoZSBtdWx0aWNhbGxcbiAgICAvLyBiYXRjaCBzaXplIGFuZCBzZW5kIG1vcmUgbXVsdGljYWxscyBwZXIgcXVvdGUuIFRvIHJlZHVjZSB0aGUgYW1vdW50IG9mIHJlcXVlc3RzIGVhY2ggcXVvdGUgc2VuZHMsIHdlXG4gICAgLy8gaGF2ZSB0byBhZGp1c3QgdGhlIHJvdXRpbmcgY29uZmlnIHNvIHdlIGV4cGxvcmUgZmV3ZXIgcm91dGVzLlxuICAgIGNhc2UgQ2hhaW5JZC5BUkJJVFJVTV9PTkU6XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2MlBvb2xTZWxlY3Rpb246IHtcbiAgICAgICAgICB0b3BOOiAzLFxuICAgICAgICAgIHRvcE5EaXJlY3RTd2FwczogMSxcbiAgICAgICAgICB0b3BOVG9rZW5Jbk91dDogNSxcbiAgICAgICAgICB0b3BOU2Vjb25kSG9wOiAyLFxuICAgICAgICAgIHRvcE5XaXRoRWFjaEJhc2VUb2tlbjogMixcbiAgICAgICAgICB0b3BOV2l0aEJhc2VUb2tlbjogNixcbiAgICAgICAgfSxcbiAgICAgICAgdjNQb29sU2VsZWN0aW9uOiB7XG4gICAgICAgICAgdG9wTjogMixcbiAgICAgICAgICB0b3BORGlyZWN0U3dhcHM6IDIsXG4gICAgICAgICAgdG9wTlRva2VuSW5PdXQ6IDIsXG4gICAgICAgICAgdG9wTlNlY29uZEhvcDogMSxcbiAgICAgICAgICB0b3BOV2l0aEVhY2hCYXNlVG9rZW46IDMsXG4gICAgICAgICAgdG9wTldpdGhCYXNlVG9rZW46IDIsXG4gICAgICAgIH0sXG4gICAgICAgIG1heFN3YXBzUGVyUGF0aDogMixcbiAgICAgICAgbWluU3BsaXRzOiAxLFxuICAgICAgICBtYXhTcGxpdHM6IDcsXG4gICAgICAgIGRpc3RyaWJ1dGlvblBlcmNlbnQ6IDI1LFxuICAgICAgICBmb3JjZUNyb3NzUHJvdG9jb2w6IGZhbHNlLFxuICAgICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2MlBvb2xTZWxlY3Rpb246IHtcbiAgICAgICAgICB0b3BOOiAzLFxuICAgICAgICAgIHRvcE5EaXJlY3RTd2FwczogMSxcbiAgICAgICAgICB0b3BOVG9rZW5Jbk91dDogNSxcbiAgICAgICAgICB0b3BOU2Vjb25kSG9wOiAyLFxuICAgICAgICAgIHRva2Vuc1RvQXZvaWRPblNlY29uZEhvcHM6IG5ldyBMb3dlckNhc2VTdHJpbmdBcnJheShcbiAgICAgICAgICAgICcweGQ0NmJhNmQ5NDIwNTBkNDg5ZGJkOTM4YTJjOTA5YTVkNTAzOWExNjEnIC8vIEFNUEwgb24gTWFpbm5ldFxuICAgICAgICAgICksXG4gICAgICAgICAgdG9wTldpdGhFYWNoQmFzZVRva2VuOiAyLFxuICAgICAgICAgIHRvcE5XaXRoQmFzZVRva2VuOiA2LFxuICAgICAgICB9LFxuICAgICAgICB2M1Bvb2xTZWxlY3Rpb246IHtcbiAgICAgICAgICB0b3BOOiAyLFxuICAgICAgICAgIHRvcE5EaXJlY3RTd2FwczogMixcbiAgICAgICAgICB0b3BOVG9rZW5Jbk91dDogMyxcbiAgICAgICAgICB0b3BOU2Vjb25kSG9wOiAxLFxuICAgICAgICAgIHRvcE5TZWNvbmRIb3BGb3JUb2tlbkFkZHJlc3M6IG5ldyBNYXBXaXRoTG93ZXJDYXNlS2V5PG51bWJlcj4oW1xuICAgICAgICAgICAgWycweDVmOTg4MDVhNGU4YmUyNTVhMzI4ODBmZGVjN2Y2NzI4YzY1NjhiYTAnLCAyXSwgLy8gTFVTRFxuICAgICAgICAgIF0pLFxuICAgICAgICAgIHRvcE5XaXRoRWFjaEJhc2VUb2tlbjogMyxcbiAgICAgICAgICB0b3BOV2l0aEJhc2VUb2tlbjogNSxcbiAgICAgICAgfSxcbiAgICAgICAgbWF4U3dhcHNQZXJQYXRoOiAzLFxuICAgICAgICBtaW5TcGxpdHM6IDEsXG4gICAgICAgIG1heFNwbGl0czogNyxcbiAgICAgICAgZGlzdHJpYnV0aW9uUGVyY2VudDogNSxcbiAgICAgICAgZm9yY2VDcm9zc1Byb3RvY29sOiBmYWxzZSxcbiAgICAgIH1cbiAgfVxufVxuXG5leHBvcnQgdHlwZSBRdW90ZVNwZWVkQ29uZmlnID0ge1xuICB2MlBvb2xTZWxlY3Rpb24/OiBQcm90b2NvbFBvb2xTZWxlY3Rpb25cbiAgdjNQb29sU2VsZWN0aW9uPzogUHJvdG9jb2xQb29sU2VsZWN0aW9uXG4gIG1heFN3YXBzUGVyUGF0aD86IG51bWJlclxuICBtYXhTcGxpdHM/OiBudW1iZXJcbiAgZGlzdHJpYnV0aW9uUGVyY2VudD86IG51bWJlclxuICB3cml0ZVRvQ2FjaGVkUm91dGVzPzogYm9vbGVhblxufVxuXG5leHBvcnQgY29uc3QgUVVPVEVfU1BFRURfQ09ORklHOiB7IFtrZXk6IHN0cmluZ106IFF1b3RlU3BlZWRDb25maWcgfSA9IHtcbiAgc3RhbmRhcmQ6IHt9LFxuICBmYXN0OiB7XG4gICAgdjJQb29sU2VsZWN0aW9uOiB7XG4gICAgICB0b3BOOiAxLFxuICAgICAgdG9wTkRpcmVjdFN3YXBzOiAxLFxuICAgICAgdG9wTlRva2VuSW5PdXQ6IDEsXG4gICAgICB0b3BOU2Vjb25kSG9wOiAwLFxuICAgICAgdG9wTldpdGhFYWNoQmFzZVRva2VuOiAxLFxuICAgICAgdG9wTldpdGhCYXNlVG9rZW46IDEsXG4gICAgfSxcbiAgICB2M1Bvb2xTZWxlY3Rpb246IHtcbiAgICAgIHRvcE46IDEsXG4gICAgICB0b3BORGlyZWN0U3dhcHM6IDEsXG4gICAgICB0b3BOVG9rZW5Jbk91dDogMSxcbiAgICAgIHRvcE5TZWNvbmRIb3A6IDAsXG4gICAgICB0b3BOV2l0aEVhY2hCYXNlVG9rZW46IDEsXG4gICAgICB0b3BOV2l0aEJhc2VUb2tlbjogMSxcbiAgICB9LFxuICAgIG1heFN3YXBzUGVyUGF0aDogMixcbiAgICBtYXhTcGxpdHM6IDEsXG4gICAgZGlzdHJpYnV0aW9uUGVyY2VudDogMTAwLFxuICAgIHdyaXRlVG9DYWNoZWRSb3V0ZXM6IGZhbHNlLFxuICB9LFxufVxuXG5leHBvcnQgdHlwZSBJbnRlbnRTcGVjaWZpY0NvbmZpZyA9IHtcbiAgdXNlQ2FjaGVkUm91dGVzPzogYm9vbGVhblxuICBvdmVyd3JpdGVDYWNoZU1vZGU/OiBDYWNoZU1vZGVcbiAgb3B0aW1pc3RpY0NhY2hlZFJvdXRlcz86IGJvb2xlYW5cbn1cblxuZXhwb3J0IGNvbnN0IElOVEVOVF9TUEVDSUZJQ19DT05GSUc6IHsgW2tleTogc3RyaW5nXTogSW50ZW50U3BlY2lmaWNDb25maWcgfSA9IHtcbiAgY2FjaGluZzoge1xuICAgIC8vIFdoZW4gdGhlIGludGVudCBpcyB0byBjcmVhdGUgYSBjYWNoZSBlbnRyeSwgd2Ugd2lsbCB1c2UgY2FjaGVkUm91dGVzIHdpdGggVGFwY29tcGFyZSB0byB0cmFjayBhY2N1cmFjeVxuICAgIHVzZUNhY2hlZFJvdXRlczogdHJ1ZSxcbiAgICBvdmVyd3JpdGVDYWNoZU1vZGU6IENhY2hlTW9kZS5UYXBjb21wYXJlLFxuICAgIC8vIFRoaXMgb3B0aW1pc3RpYz1mYWxzZSBpcyAqc3VwZXIqIGltcG9ydGFudCB0byBhdm9pZCBhbiBpbmZpbml0ZSBsb29wIG9mIGNhY2hpbmcgcXVvdGVzIGNhbGxpbmcgdGhlbXNlbHZlc1xuICAgIG9wdGltaXN0aWNDYWNoZWRSb3V0ZXM6IGZhbHNlLFxuICB9LFxuICBxdW90ZToge1xuICAgIC8vIFdoZW4gdGhlIGludGVudCBpcyB0byBnZXQgYSBxdW90ZSwgd2Ugc2hvdWxkIHVzZSB0aGUgY2FjaGUgYW5kIG9wdGltaXN0aWMgY2FjaGVkIHJvdXRlc1xuICAgIHVzZUNhY2hlZFJvdXRlczogdHJ1ZSxcbiAgICBvcHRpbWlzdGljQ2FjaGVkUm91dGVzOiB0cnVlLFxuICB9LFxuICBzd2FwOiB7XG4gICAgLy8gV2hlbiB0aGUgaW50ZW50IGlzIHRvIHByZXBhcmUgdGhlIHN3YXAsIHdlIGNhbiB1c2UgY2FjaGUsIGJ1dCBpdCBzaG91bGQgbm90IGJlIG9wdGltaXN0aWNcbiAgICB1c2VDYWNoZWRSb3V0ZXM6IHRydWUsXG4gICAgb3B0aW1pc3RpY0NhY2hlZFJvdXRlczogZmFsc2UsXG4gIH0sXG4gIHByaWNpbmc6IHtcbiAgICAvLyBXaGVuIHRoZSBpbnRlbnQgaXMgdG8gZ2V0IHByaWNpbmcsIHdlIHNob3VsZCB1c2UgdGhlIGNhY2hlIGFuZCBvcHRpbWlzdGljIGNhY2hlZCByb3V0ZXNcbiAgICB1c2VDYWNoZWRSb3V0ZXM6IHRydWUsXG4gICAgb3B0aW1pc3RpY0NhY2hlZFJvdXRlczogdHJ1ZSxcbiAgfSxcbn1cblxuZXhwb3J0IHR5cGUgRmVlT25UcmFuc2ZlclNwZWNpZmljQ29uZmlnID0ge1xuICBlbmFibGVGZWVPblRyYW5zZmVyRmVlRmV0Y2hpbmc/OiBib29sZWFuXG59XG5cbmV4cG9ydCBjb25zdCBGRUVfT05fVFJBTlNGRVJfU1BFQ0lGSUNfQ09ORklHID0gKFxuICBlbmFibGVGZWVPblRyYW5zZmVyRmVlRmV0Y2hpbmc/OiBib29sZWFuXG4pOiBGZWVPblRyYW5zZmVyU3BlY2lmaWNDb25maWcgPT4ge1xuICByZXR1cm4ge1xuICAgIGVuYWJsZUZlZU9uVHJhbnNmZXJGZWVGZXRjaGluZzogZW5hYmxlRmVlT25UcmFuc2ZlckZlZUZldGNoaW5nLFxuICB9IGFzIEZlZU9uVHJhbnNmZXJTcGVjaWZpY0NvbmZpZ1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VTbGlwcGFnZVRvbGVyYW5jZShzbGlwcGFnZVRvbGVyYW5jZTogc3RyaW5nKTogUGVyY2VudCB7XG4gIGNvbnN0IHNsaXBwYWdlUGVyMTBrID0gTWF0aC5yb3VuZChwYXJzZUZsb2F0KHNsaXBwYWdlVG9sZXJhbmNlKSAqIDEwMClcbiAgcmV0dXJuIG5ldyBQZXJjZW50KHNsaXBwYWdlUGVyMTBrLCAxMF8wMDApXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZURlYWRsaW5lKGRlYWRsaW5lOiBzdHJpbmcpOiBudW1iZXIge1xuICByZXR1cm4gTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCkgKyBwYXJzZUludChkZWFkbGluZSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUG9ydGlvblBlcmNlbnQocG9ydGlvbkJpcHM6IG51bWJlcik6IFBlcmNlbnQge1xuICByZXR1cm4gbmV3IFBlcmNlbnQocG9ydGlvbkJpcHMsIDEwXzAwMClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRmVlT3B0aW9ucyhwb3J0aW9uQmlwcz86IG51bWJlciwgcG9ydGlvblJlY2lwaWVudD86IHN0cmluZyk6IEZlZU9wdGlvbnMgfCB1bmRlZmluZWQge1xuICBpZiAoIXBvcnRpb25CaXBzIHx8ICFwb3J0aW9uUmVjaXBpZW50KSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG5cbiAgcmV0dXJuIHsgZmVlOiBwYXJzZVBvcnRpb25QZXJjZW50KHBvcnRpb25CaXBzKSwgcmVjaXBpZW50OiBwb3J0aW9uUmVjaXBpZW50IH0gYXMgRmVlT3B0aW9uc1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VGbGF0RmVlT3B0aW9ucyhwb3J0aW9uQW1vdW50Pzogc3RyaW5nLCBwb3J0aW9uUmVjaXBpZW50Pzogc3RyaW5nKTogRmxhdEZlZU9wdGlvbnMgfCB1bmRlZmluZWQge1xuICBpZiAoIXBvcnRpb25BbW91bnQgfHwgIXBvcnRpb25SZWNpcGllbnQpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICByZXR1cm4geyBhbW91bnQ6IHBvcnRpb25BbW91bnQsIHJlY2lwaWVudDogcG9ydGlvblJlY2lwaWVudCB9IGFzIEZsYXRGZWVPcHRpb25zXG59XG5cbmV4cG9ydCB0eXBlIEFsbEZlZU9wdGlvbnMgPSB7XG4gIGZlZT86IEZlZU9wdGlvbnNcbiAgZmxhdEZlZT86IEZsYXRGZWVPcHRpb25zXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwb3B1bGF0ZUZlZU9wdGlvbnMoXG4gIHR5cGU6IHN0cmluZyxcbiAgcG9ydGlvbkJpcHM/OiBudW1iZXIsXG4gIHBvcnRpb25SZWNpcGllbnQ/OiBzdHJpbmcsXG4gIHBvcnRpb25BbW91bnQ/OiBzdHJpbmdcbik6IEFsbEZlZU9wdGlvbnMgfCB1bmRlZmluZWQge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdleGFjdEluJzpcbiAgICAgIGNvbnN0IGZlZU9wdGlvbnMgPSBwYXJzZUZlZU9wdGlvbnMocG9ydGlvbkJpcHMsIHBvcnRpb25SZWNpcGllbnQpXG4gICAgICByZXR1cm4geyBmZWU6IGZlZU9wdGlvbnMgfVxuICAgIGNhc2UgJ2V4YWN0T3V0JzpcbiAgICAgIGNvbnN0IGZsYXRGZWVPcHRpb25zID0gcGFyc2VGbGF0RmVlT3B0aW9ucyhwb3J0aW9uQW1vdW50LCBwb3J0aW9uUmVjaXBpZW50KVxuICAgICAgcmV0dXJuIHsgZmxhdEZlZTogZmxhdEZlZU9wdGlvbnMgfVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVQb3J0aW9uQW1vdW50KGN1cnJlbmN5T3V0OiBDdXJyZW5jeUFtb3VudDxDdXJyZW5jeT4sIHBvcnRpb25CaXBzPzogbnVtYmVyKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgaWYgKCFwb3J0aW9uQmlwcykge1xuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuXG4gIHJldHVybiBjdXJyZW5jeU91dC5tdWx0aXBseShwYXJzZVBvcnRpb25QZXJjZW50KHBvcnRpb25CaXBzKSkucXVvdGllbnQudG9TdHJpbmcoKVxufVxuXG5leHBvcnQgY29uc3QgREVGQVVMVF9ERUFETElORSA9IDYwMCAvLyAxMCBtaW51dGVzXG5leHBvcnQgY29uc3QgVU5JU1dBUF9ET1RfRVRIX0FERFJFU1MgPSAnMHgxYTlDODE4MkMwOUY1MEM4MzE4ZDc2OTI0NWJlQTUyYzMyQkUzNUJDJ1xuIl19