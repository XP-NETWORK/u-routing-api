import { CachingTokenListProvider, log, NodeJSCache, } from '@uniswap/smart-order-router';
import S3 from 'aws-sdk/clients/s3';
import NodeCache from 'node-cache';
const TOKEN_LIST_CACHE = new NodeCache({ stdTTL: 600, useClones: false });
export class AWSTokenListProvider extends CachingTokenListProvider {
    static async fromTokenListS3Bucket(chainId, bucket, tokenListURI) {
        const s3 = new S3({ correctClockSkew: true, maxRetries: 3 });
        const cachedTokenList = TOKEN_LIST_CACHE.get(tokenListURI);
        const tokenCache = new NodeCache({ stdTTL: 360, useClones: false });
        if (cachedTokenList) {
            log.info(`Found token lists for ${tokenListURI} in local cache`);
            return super.fromTokenList(chainId, cachedTokenList, new NodeJSCache(tokenCache));
        }
        try {
            log.info(`Getting tokenLists from s3.`);
            const tokenListResult = await s3.getObject({ Key: encodeURIComponent(tokenListURI), Bucket: bucket }).promise();
            const { Body: tokenListBuffer } = tokenListResult;
            if (!tokenListBuffer) {
                return super.fromTokenListURI(chainId, tokenListURI, new NodeJSCache(tokenCache));
            }
            const tokenList = JSON.parse(tokenListBuffer.toString('utf-8'));
            log.info(`Got both tokenLists from s3. ${tokenList.tokens.length} tokens in main list.`);
            TOKEN_LIST_CACHE.set(tokenListURI, tokenList);
            return new CachingTokenListProvider(chainId, tokenList, new NodeJSCache(tokenCache));
        }
        catch (err) {
            log.info({ err }, `Failed to get tokenLists from s3.`);
            return super.fromTokenListURI(chainId, tokenListURI, new NodeJSCache(tokenCache));
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXdzLXRva2VuLWxpc3QtcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9saWIvaGFuZGxlcnMvcm91dGVyLWVudGl0aWVzL2F3cy10b2tlbi1saXN0LXByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCx3QkFBd0IsRUFHeEIsR0FBRyxFQUNILFdBQVcsR0FDWixNQUFNLDZCQUE2QixDQUFBO0FBR3BDLE9BQU8sRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBQ25DLE9BQU8sU0FBUyxNQUFNLFlBQVksQ0FBQTtBQUVsQyxNQUFNLGdCQUFnQixHQUFHLElBQUksU0FBUyxDQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQTtBQUV6RSxNQUFNLE9BQU8sb0JBQXFCLFNBQVEsd0JBQXdCO0lBQ3pELE1BQU0sQ0FBQyxLQUFLLENBQUMscUJBQXFCLENBQ3ZDLE9BQWdCLEVBQ2hCLE1BQWMsRUFDZCxZQUFvQjtRQUVwQixNQUFNLEVBQUUsR0FBRyxJQUFJLEVBQUUsQ0FBQyxFQUFFLGdCQUFnQixFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUU1RCxNQUFNLGVBQWUsR0FBRyxnQkFBZ0IsQ0FBQyxHQUFHLENBQVksWUFBWSxDQUFDLENBQUE7UUFFckUsTUFBTSxVQUFVLEdBQUcsSUFBSSxTQUFTLENBQUMsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFBO1FBRW5FLElBQUksZUFBZSxFQUFFO1lBQ25CLEdBQUcsQ0FBQyxJQUFJLENBQUMseUJBQXlCLFlBQVksaUJBQWlCLENBQUMsQ0FBQTtZQUNoRSxPQUFPLEtBQUssQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxJQUFJLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFBO1NBQ2xGO1FBRUQsSUFBSTtZQUNGLEdBQUcsQ0FBQyxJQUFJLENBQUMsNkJBQTZCLENBQUMsQ0FBQTtZQUN2QyxNQUFNLGVBQWUsR0FBRyxNQUFNLEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFBRSxHQUFHLEVBQUUsa0JBQWtCLENBQUMsWUFBWSxDQUFDLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUE7WUFFL0csTUFBTSxFQUFFLElBQUksRUFBRSxlQUFlLEVBQUUsR0FBRyxlQUFlLENBQUE7WUFFakQsSUFBSSxDQUFDLGVBQWUsRUFBRTtnQkFDcEIsT0FBTyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxJQUFJLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFBO2FBQ2xGO1lBRUQsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFjLENBQUE7WUFFNUUsR0FBRyxDQUFDLElBQUksQ0FBQyxnQ0FBZ0MsU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixDQUFDLENBQUE7WUFFeEYsZ0JBQWdCLENBQUMsR0FBRyxDQUFZLFlBQVksRUFBRSxTQUFTLENBQUMsQ0FBQTtZQUV4RCxPQUFPLElBQUksd0JBQXdCLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxJQUFJLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFBO1NBQ3JGO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsbUNBQW1DLENBQUMsQ0FBQTtZQUN0RCxPQUFPLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLElBQUksV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUE7U0FDbEY7SUFDSCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDYWNoaW5nVG9rZW5MaXN0UHJvdmlkZXIsXG4gIElUb2tlbkxpc3RQcm92aWRlcixcbiAgSVRva2VuUHJvdmlkZXIsXG4gIGxvZyxcbiAgTm9kZUpTQ2FjaGUsXG59IGZyb20gJ0B1bmlzd2FwL3NtYXJ0LW9yZGVyLXJvdXRlcidcbmltcG9ydCB7IENoYWluSWQgfSBmcm9tICdAdW5pc3dhcC9zZGstY29yZSdcbmltcG9ydCB7IFRva2VuTGlzdCB9IGZyb20gJ0B1bmlzd2FwL3Rva2VuLWxpc3RzJ1xuaW1wb3J0IFMzIGZyb20gJ2F3cy1zZGsvY2xpZW50cy9zMydcbmltcG9ydCBOb2RlQ2FjaGUgZnJvbSAnbm9kZS1jYWNoZSdcblxuY29uc3QgVE9LRU5fTElTVF9DQUNIRSA9IG5ldyBOb2RlQ2FjaGUoeyBzdGRUVEw6IDYwMCwgdXNlQ2xvbmVzOiBmYWxzZSB9KVxuXG5leHBvcnQgY2xhc3MgQVdTVG9rZW5MaXN0UHJvdmlkZXIgZXh0ZW5kcyBDYWNoaW5nVG9rZW5MaXN0UHJvdmlkZXIge1xuICBwdWJsaWMgc3RhdGljIGFzeW5jIGZyb21Ub2tlbkxpc3RTM0J1Y2tldChcbiAgICBjaGFpbklkOiBDaGFpbklkLFxuICAgIGJ1Y2tldDogc3RyaW5nLFxuICAgIHRva2VuTGlzdFVSSTogc3RyaW5nXG4gICk6IFByb21pc2U8SVRva2VuTGlzdFByb3ZpZGVyICYgSVRva2VuUHJvdmlkZXI+IHtcbiAgICBjb25zdCBzMyA9IG5ldyBTMyh7IGNvcnJlY3RDbG9ja1NrZXc6IHRydWUsIG1heFJldHJpZXM6IDMgfSlcblxuICAgIGNvbnN0IGNhY2hlZFRva2VuTGlzdCA9IFRPS0VOX0xJU1RfQ0FDSEUuZ2V0PFRva2VuTGlzdD4odG9rZW5MaXN0VVJJKVxuXG4gICAgY29uc3QgdG9rZW5DYWNoZSA9IG5ldyBOb2RlQ2FjaGUoeyBzdGRUVEw6IDM2MCwgdXNlQ2xvbmVzOiBmYWxzZSB9KVxuXG4gICAgaWYgKGNhY2hlZFRva2VuTGlzdCkge1xuICAgICAgbG9nLmluZm8oYEZvdW5kIHRva2VuIGxpc3RzIGZvciAke3Rva2VuTGlzdFVSSX0gaW4gbG9jYWwgY2FjaGVgKVxuICAgICAgcmV0dXJuIHN1cGVyLmZyb21Ub2tlbkxpc3QoY2hhaW5JZCwgY2FjaGVkVG9rZW5MaXN0LCBuZXcgTm9kZUpTQ2FjaGUodG9rZW5DYWNoZSkpXG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGxvZy5pbmZvKGBHZXR0aW5nIHRva2VuTGlzdHMgZnJvbSBzMy5gKVxuICAgICAgY29uc3QgdG9rZW5MaXN0UmVzdWx0ID0gYXdhaXQgczMuZ2V0T2JqZWN0KHsgS2V5OiBlbmNvZGVVUklDb21wb25lbnQodG9rZW5MaXN0VVJJKSwgQnVja2V0OiBidWNrZXQgfSkucHJvbWlzZSgpXG5cbiAgICAgIGNvbnN0IHsgQm9keTogdG9rZW5MaXN0QnVmZmVyIH0gPSB0b2tlbkxpc3RSZXN1bHRcblxuICAgICAgaWYgKCF0b2tlbkxpc3RCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmZyb21Ub2tlbkxpc3RVUkkoY2hhaW5JZCwgdG9rZW5MaXN0VVJJLCBuZXcgTm9kZUpTQ2FjaGUodG9rZW5DYWNoZSkpXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRva2VuTGlzdCA9IEpTT04ucGFyc2UodG9rZW5MaXN0QnVmZmVyLnRvU3RyaW5nKCd1dGYtOCcpKSBhcyBUb2tlbkxpc3RcblxuICAgICAgbG9nLmluZm8oYEdvdCBib3RoIHRva2VuTGlzdHMgZnJvbSBzMy4gJHt0b2tlbkxpc3QudG9rZW5zLmxlbmd0aH0gdG9rZW5zIGluIG1haW4gbGlzdC5gKVxuXG4gICAgICBUT0tFTl9MSVNUX0NBQ0hFLnNldDxUb2tlbkxpc3Q+KHRva2VuTGlzdFVSSSwgdG9rZW5MaXN0KVxuXG4gICAgICByZXR1cm4gbmV3IENhY2hpbmdUb2tlbkxpc3RQcm92aWRlcihjaGFpbklkLCB0b2tlbkxpc3QsIG5ldyBOb2RlSlNDYWNoZSh0b2tlbkNhY2hlKSlcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZy5pbmZvKHsgZXJyIH0sIGBGYWlsZWQgdG8gZ2V0IHRva2VuTGlzdHMgZnJvbSBzMy5gKVxuICAgICAgcmV0dXJuIHN1cGVyLmZyb21Ub2tlbkxpc3RVUkkoY2hhaW5JZCwgdG9rZW5MaXN0VVJJLCBuZXcgTm9kZUpTQ2FjaGUodG9rZW5DYWNoZSkpXG4gICAgfVxuICB9XG59XG4iXX0=