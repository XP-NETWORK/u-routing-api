import { log, V3SubgraphProvider } from '@uniswap/smart-order-router';
import { S3 } from 'aws-sdk';
import { ChainId } from '@uniswap/sdk-core';
import _ from 'lodash';
import NodeCache from 'node-cache';
const POOL_CACHE = new NodeCache({ stdTTL: 240, useClones: false });
const POOL_CACHE_KEY = (chainId) => `pools${chainId}`;
export class V3AWSSubgraphProviderWithFallback extends V3SubgraphProvider {
    constructor(chain, bucket, key) {
        super(chain);
        this.chain = chain;
        this.bucket = bucket;
        this.key = `${key}${chain != ChainId.MAINNET ? `-${chain}` : ''}`;
    }
    async getPools() {
        log.info(`In legacy AWS subgraph provider for protocol V3`);
        const s3 = new S3();
        const cachedPools = POOL_CACHE.get(POOL_CACHE_KEY(this.chain));
        if (cachedPools) {
            log.info({ subgraphPoolsSample: cachedPools.slice(0, 5) }, `Subgraph pools fetched from local cache. Num: ${cachedPools.length}`);
            return cachedPools;
        }
        log.info({ bucket: this.bucket, key: this.key }, `Subgraph pools local cache miss. Getting subgraph pools from S3 ${this.bucket}/${this.key}`);
        try {
            const result = await s3.getObject({ Key: this.key, Bucket: this.bucket }).promise();
            const { Body: poolsBuffer } = result;
            if (!poolsBuffer) {
                throw new Error('Could not get subgraph pool cache from S3');
            }
            let pools = JSON.parse(poolsBuffer.toString('utf-8'));
            if (pools[0].totalValueLockedETH) {
                pools = _.map(pools, (pool) => ({
                    ...pool,
                    id: pool.id.toLowerCase(),
                    token0: {
                        id: pool.token0.id.toLowerCase(),
                    },
                    token1: {
                        id: pool.token1.id.toLowerCase(),
                    },
                    tvlETH: parseFloat(pool.totalValueLockedETH),
                    tvlUSD: parseFloat(pool.totalValueLockedUSD),
                }));
                log.info({ sample: pools.slice(0, 5) }, 'Converted legacy schema to new schema');
            }
            log.info({ bucket: this.bucket, key: this.key, sample: pools.slice(0, 3) }, `Got subgraph pools from S3. Num: ${pools.length}`);
            POOL_CACHE.set(POOL_CACHE_KEY(this.chain), pools);
            return pools;
        }
        catch (err) {
            log.info({ bucket: this.bucket, key: this.key }, `Failed to get subgraph pools from S3 ${this.bucket}/${this.key}.`);
            return super.getPools();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidjMtYXdzLXN1YmdyYXBoLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vbGliL2hhbmRsZXJzL3JvdXRlci1lbnRpdGllcy92My1hd3Mtc3ViZ3JhcGgtcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUF1QixHQUFHLEVBQWtCLGtCQUFrQixFQUFFLE1BQU0sNkJBQTZCLENBQUE7QUFDMUcsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLFNBQVMsQ0FBQTtBQUM1QixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFDM0MsT0FBTyxDQUFDLE1BQU0sUUFBUSxDQUFBO0FBQ3RCLE9BQU8sU0FBUyxNQUFNLFlBQVksQ0FBQTtBQUVsQyxNQUFNLFVBQVUsR0FBRyxJQUFJLFNBQVMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUE7QUFDbkUsTUFBTSxjQUFjLEdBQUcsQ0FBQyxPQUFnQixFQUFFLEVBQUUsQ0FBQyxRQUFRLE9BQU8sRUFBRSxDQUFBO0FBRTlELE1BQU0sT0FBTyxpQ0FBa0MsU0FBUSxrQkFBa0I7SUFHdkUsWUFBb0IsS0FBYyxFQUFVLE1BQWMsRUFBRSxHQUFXO1FBQ3JFLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQURNLFVBQUssR0FBTCxLQUFLLENBQVM7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBRXhELElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsS0FBSyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFBO0lBQ25FLENBQUM7SUFFTSxLQUFLLENBQUMsUUFBUTtRQUNuQixHQUFHLENBQUMsSUFBSSxDQUFDLGlEQUFpRCxDQUFDLENBQUE7UUFFM0QsTUFBTSxFQUFF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LElBQUksSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUNuRSxDQUFBO1lBRUQsT0FBTyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUE7U0FDeEI7SUFDSCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJVjNTdWJncmFwaFByb3ZpZGVyLCBsb2csIFYzU3ViZ3JhcGhQb29sLCBWM1N1YmdyYXBoUHJvdmlkZXIgfSBmcm9tICdAdW5pc3dhcC9zbWFydC1vcmRlci1yb3V0ZXInXG5pbXBvcnQgeyBTMyB9IGZyb20gJ2F3cy1zZGsnXG5pbXBvcnQgeyBDaGFpbklkIH0gZnJvbSAnQHVuaXN3YXAvc2RrLWNvcmUnXG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnXG5pbXBvcnQgTm9kZUNhY2hlIGZyb20gJ25vZGUtY2FjaGUnXG5cbmNvbnN0IFBPT0xfQ0FDSEUgPSBuZXcgTm9kZUNhY2hlKHsgc3RkVFRMOiAyNDAsIHVzZUNsb25lczogZmFsc2UgfSlcbmNvbnN0IFBPT0xfQ0FDSEVfS0VZID0gKGNoYWluSWQ6IENoYWluSWQpID0+IGBwb29scyR7Y2hhaW5JZH1gXG5cbmV4cG9ydCBjbGFzcyBWM0FXU1N1YmdyYXBoUHJvdmlkZXJXaXRoRmFsbGJhY2sgZXh0ZW5kcyBWM1N1YmdyYXBoUHJvdmlkZXIgaW1wbGVtZW50cyBJVjNTdWJncmFwaFByb3ZpZGVyIHtcbiAgcHJpdmF0ZSBrZXk6IHN0cmluZ1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY2hhaW46IENoYWluSWQsIHByaXZhdGUgYnVja2V0OiBzdHJpbmcsIGtleTogc3RyaW5nKSB7XG4gICAgc3VwZXIoY2hhaW4pXG4gICAgdGhpcy5rZXkgPSBgJHtrZXl9JHtjaGFpbiAhPSBDaGFpbklkLk1BSU5ORVQgPyBgLSR7Y2hhaW59YCA6ICcnfWBcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXRQb29scygpOiBQcm9taXNlPFYzU3ViZ3JhcGhQb29sW10+IHtcbiAgICBsb2cuaW5mbyhgSW4gbGVnYWN5IEFXUyBzdWJncmFwaCBwcm92aWRlciBmb3IgcHJvdG9jb2wgVjNgKVxuXG4gICAgY29uc3QgczMgPSBuZXcgUzMoKVxuXG4gICAgY29uc3QgY2FjaGVkUG9vbHMgPSBQT09MX0NBQ0hFLmdldDxWM1N1YmdyYXBoUG9vbFtdPihQT09MX0NBQ0hFX0tFWSh0aGlzLmNoYWluKSlcblxuICAgIGlmIChjYWNoZWRQb29scykge1xuICAgICAgbG9nLmluZm8oXG4gICAgICAgIHsgc3ViZ3JhcGhQb29sc1NhbXBsZTogY2FjaGVkUG9vbHMuc2xpY2UoMCwgNSkgfSxcbiAgICAgICAgYFN1YmdyYXBoIHBvb2xzIGZldGNoZWQgZnJvbSBsb2NhbCBjYWNoZS4gTnVtOiAke2NhY2hlZFBvb2xzLmxlbmd0aH1gXG4gICAgICApXG5cbiAgICAgIHJldHVybiBjYWNoZWRQb29sc1xuICAgIH1cblxuICAgIGxvZy5pbmZvKFxuICAgICAgeyBidWNrZXQ6IHRoaXMuYnVja2V0LCBrZXk6IHRoaXMua2V5IH0sXG4gICAgICBgU3ViZ3JhcGggcG9vbHMgbG9jYWwgY2FjaGUgbWlzcy4gR2V0dGluZyBzdWJncmFwaCBwb29scyBmcm9tIFMzICR7dGhpcy5idWNrZXR9LyR7dGhpcy5rZXl9YFxuICAgIClcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgczMuZ2V0T2JqZWN0KHsgS2V5OiB0aGlzLmtleSwgQnVja2V0OiB0aGlzLmJ1Y2tldCB9KS5wcm9taXNlKClcblxuICAgICAgY29uc3QgeyBCb2R5OiBwb29sc0J1ZmZlciB9ID0gcmVzdWx0XG5cbiAgICAgIGlmICghcG9vbHNCdWZmZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZ2V0IHN1YmdyYXBoIHBvb2wgY2FjaGUgZnJvbSBTMycpXG4gICAgICB9XG5cbiAgICAgIGxldCBwb29scyA9IEpTT04ucGFyc2UocG9vbHNCdWZmZXIudG9TdHJpbmcoJ3V0Zi04JykpXG5cbiAgICAgIGlmIChwb29sc1swXS50b3RhbFZhbHVlTG9ja2VkRVRIKSB7XG4gICAgICAgIHBvb2xzID0gXy5tYXAoXG4gICAgICAgICAgcG9vbHMsXG4gICAgICAgICAgKHBvb2wpID0+XG4gICAgICAgICAgICAoe1xuICAgICAgICAgICAgICAuLi5wb29sLFxuICAgICAgICAgICAgICBpZDogcG9vbC5pZC50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgICB0b2tlbjA6IHtcbiAgICAgICAgICAgICAgICBpZDogcG9vbC50b2tlbjAuaWQudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgdG9rZW4xOiB7XG4gICAgICAgICAgICAgICAgaWQ6IHBvb2wudG9rZW4xLmlkLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHR2bEVUSDogcGFyc2VGbG9hdChwb29sLnRvdGFsVmFsdWVMb2NrZWRFVEgpLFxuICAgICAgICAgICAgICB0dmxVU0Q6IHBhcnNlRmxvYXQocG9vbC50b3RhbFZhbHVlTG9ja2VkVVNEKSxcbiAgICAgICAgICAgIH0gYXMgVjNTdWJncmFwaFBvb2wpXG4gICAgICAgIClcbiAgICAgICAgbG9nLmluZm8oeyBzYW1wbGU6IHBvb2xzLnNsaWNlKDAsIDUpIH0sICdDb252ZXJ0ZWQgbGVnYWN5IHNjaGVtYSB0byBuZXcgc2NoZW1hJylcbiAgICAgIH1cblxuICAgICAgbG9nLmluZm8oXG4gICAgICAgIHsgYnVja2V0OiB0aGlzLmJ1Y2tldCwga2V5OiB0aGlzLmtleSwgc2FtcGxlOiBwb29scy5zbGljZSgwLCAzKSB9LFxuICAgICAgICBgR290IHN1YmdyYXBoIHBvb2xzIGZyb20gUzMuIE51bTogJHtwb29scy5sZW5ndGh9YFxuICAgICAgKVxuXG4gICAgICBQT09MX0NBQ0hFLnNldDxWM1N1YmdyYXBoUG9vbFtdPihQT09MX0NBQ0hFX0tFWSh0aGlzLmNoYWluKSwgcG9vbHMpXG5cbiAgICAgIHJldHVybiBwb29sc1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nLmluZm8oXG4gICAgICAgIHsgYnVja2V0OiB0aGlzLmJ1Y2tldCwga2V5OiB0aGlzLmtleSB9LFxuICAgICAgICBgRmFpbGVkIHRvIGdldCBzdWJncmFwaCBwb29scyBmcm9tIFMzICR7dGhpcy5idWNrZXR9LyR7dGhpcy5rZXl9LmBcbiAgICAgIClcblxuICAgICAgcmV0dXJuIHN1cGVyLmdldFBvb2xzKClcbiAgICB9XG4gIH1cbn1cbiJdfQ==