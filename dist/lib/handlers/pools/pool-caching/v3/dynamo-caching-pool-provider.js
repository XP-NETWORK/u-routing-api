import { DynamoCachingV3Pool } from './cache-dynamo-pool';
export class DynamoDBCachingV3PoolProvider {
    constructor(chainId, poolProvider, tableName) {
        this.chainId = chainId;
        this.poolProvider = poolProvider;
        this.POOL_CACHE_KEY = (chainId, address) => `pool-${chainId}-${address}`;
        this.dynamoCache = new DynamoCachingV3Pool({ tableName, ttlMinutes: 1 });
    }
    getPoolAddress(tokenA, tokenB, feeAmount) {
        return this.poolProvider.getPoolAddress(tokenA, tokenB, feeAmount);
    }
    async getPools(tokenPairs, providerConfig) {
        const poolAddressSet = new Set();
        const poolsToGetTokenPairs = [];
        const poolsToGetAddresses = [];
        const poolAddressToPool = {};
        const blockNumber = await (providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber);
        for (const [tokenA, tokenB, feeAmount] of tokenPairs) {
            const { poolAddress, token0, token1 } = this.getPoolAddress(tokenA, tokenB, feeAmount);
            if (poolAddressSet.has(poolAddress)) {
                continue;
            }
            poolAddressSet.add(poolAddress);
            const partitionKey = this.POOL_CACHE_KEY(this.chainId, poolAddress);
            const cachedPool = await this.dynamoCache.get(partitionKey, blockNumber);
            if (cachedPool) {
                poolAddressToPool[poolAddress] = cachedPool;
                continue;
            }
            poolsToGetTokenPairs.push([token0, token1, feeAmount]);
            poolsToGetAddresses.push(poolAddress);
        }
        if (poolsToGetAddresses.length > 0) {
            const poolAccessor = await this.poolProvider.getPools(poolsToGetTokenPairs, providerConfig);
            for (const address of poolsToGetAddresses) {
                const pool = poolAccessor.getPoolByAddress(address);
                if (pool) {
                    poolAddressToPool[address] = pool;
                    const partitionKey = this.POOL_CACHE_KEY(this.chainId, address);
                    await this.dynamoCache.set(pool, partitionKey, blockNumber);
                }
            }
        }
        return {
            getPool: (tokenA, tokenB, feeAmount) => {
                const { poolAddress } = this.getPoolAddress(tokenA, tokenB, feeAmount);
                return poolAddressToPool[poolAddress];
            },
            getPoolByAddress: (address) => poolAddressToPool[address],
            getAllPools: () => Object.values(poolAddressToPool),
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1vLWNhY2hpbmctcG9vbC1wcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYi9oYW5kbGVycy9wb29scy9wb29sLWNhY2hpbmcvdjMvZHluYW1vLWNhY2hpbmctcG9vbC1wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQTtBQUV6RCxNQUFNLE9BQU8sNkJBQTZCO0lBSXhDLFlBQXNCLE9BQWdCLEVBQVksWUFBNkIsRUFBRSxTQUFpQjtRQUE1RSxZQUFPLEdBQVAsT0FBTyxDQUFTO1FBQVksaUJBQVksR0FBWixZQUFZLENBQWlCO1FBRjlELG1CQUFjLEdBQUcsQ0FBQyxPQUFnQixFQUFFLE9BQWUsRUFBRSxFQUFFLENBQUMsUUFBUSxPQUFPLElBQUksT0FBTyxFQUFFLENBQUE7UUFHbkcsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLG1CQUFtQixDQUFDLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQzFFLENBQUM7SUFFTSxjQUFjLENBQ25CLE1BQWEsRUFDYixNQUFhLEVBQ2IsU0FBb0I7UUFNcEIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFBO0lBQ3BFLENBQUM7SUFFTSxLQUFLLENBQUMsUUFBUSxDQUNuQixVQUF1QyxFQUN2QyxjQUErQjtRQUUvQixNQUFNLGNBQWMsR0FBZ0IsSUFBSSxHQUFHLEVBQVUsQ0FBQTtRQUNyRCxNQUFNLG9CQUFvQixHQUFxQyxFQUFFLENBQUE7UUFDakUsTUFBTSxtQkFBbUIsR0FBYSxFQUFFLENBQUE7UUFDeEMsTUFBTSxpQkFBaUIsR0FBb0MsRUFBRSxDQUFBO1FBQzdELE1BQU0sV0FBVyxHQUF1QixNQUFNLENBQUEsY0FBYyxhQUFkLGNBQWMsdUJBQWQsY0FBYyxDQUFFLFdBQVcsQ0FBQSxDQUFBO1FBRXpFLEtBQUssTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsU0FBUyxDQUFDLElBQUksVUFBVSxFQUFFO1lBQ3BELE1BQU0sRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQTtZQUV0RixJQUFJLGNBQWMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUU7Z0JBQ25DLFNBQVE7YUFDVDtZQUVELGNBQWMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUE7WUFFL0IsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFBO1lBQ25FLE1BQU0sVUFBVSxHQUFHLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLFdBQVcsQ0FBQyxDQUFBO1lBQ3hFLElBQUksVUFBVSxFQUFFO2dCQUNkLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxHQUFHLFVBQVUsQ0FBQTtnQkFDM0MsU0FBUTthQUNUO1lBRUQsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFBO1lBQ3RELG1CQUFtQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQTtTQUN0QztRQUVELElBQUksbUJBQW1CLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNsQyxNQUFNLFlBQVksR0FBRyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLG9CQUFvQixFQUFFLGNBQWMsQ0FBQyxDQUFBO1lBQzNGLEtBQUssTUFBTSxPQUFPLElBQUksbUJBQW1CLEVBQUU7Z0JBQ3pDLE1BQU0sSUFBSSxHQUFHLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQTtnQkFDbkQsSUFBSSxJQUFJLEVBQUU7b0JBQ1IsaUJBQWlCLENBQUMsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFBO29CQUVqQyxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUE7b0JBQy9ELE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxXQUFXLENBQUMsQ0FBQTtpQkFDNUQ7YUFDRjtTQUNGO1FBRUQsT0FBTztZQUNMLE9BQU8sRUFBRSxDQUFDLE1BQWEsRUFBRSxNQUFhLEVBQUUsU0FBb0IsRUFBb0IsRUFBRTtnQkFDaEYsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQTtnQkFDdEUsT0FBTyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsQ0FBQTtZQUN2QyxDQUFDO1lBQ0QsZ0JBQWdCLEVBQUUsQ0FBQyxPQUFlLEVBQW9CLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUM7WUFDbkYsV0FBVyxFQUFFLEdBQVcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUM7U0FDNUQsQ0FBQTtJQUNILENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElWM1Bvb2xQcm92aWRlciwgVjNQb29sQWNjZXNzb3IgfSBmcm9tICdAdW5pc3dhcC9zbWFydC1vcmRlci1yb3V0ZXInXG5pbXBvcnQgeyBDaGFpbklkLCBUb2tlbiB9IGZyb20gJ0B1bmlzd2FwL3Nkay1jb3JlJ1xuaW1wb3J0IHsgUHJvdmlkZXJDb25maWcgfSBmcm9tICdAdW5pc3dhcC9zbWFydC1vcmRlci1yb3V0ZXIvYnVpbGQvbWFpbi9wcm92aWRlcnMvcHJvdmlkZXInXG5pbXBvcnQgeyBGZWVBbW91bnQsIFBvb2wgfSBmcm9tICdAdW5pc3dhcC92My1zZGsnXG5pbXBvcnQgeyBJRHluYW1vQ2FjaGUgfSBmcm9tICcuLi9jYWNoZS1keW5hbW8nXG5pbXBvcnQgeyBEeW5hbW9DYWNoaW5nVjNQb29sIH0gZnJvbSAnLi9jYWNoZS1keW5hbW8tcG9vbCdcblxuZXhwb3J0IGNsYXNzIER5bmFtb0RCQ2FjaGluZ1YzUG9vbFByb3ZpZGVyIGltcGxlbWVudHMgSVYzUG9vbFByb3ZpZGVyIHtcbiAgcHJpdmF0ZSByZWFkb25seSBkeW5hbW9DYWNoZTogSUR5bmFtb0NhY2hlPHN0cmluZywgbnVtYmVyLCBQb29sPlxuICBwcml2YXRlIHJlYWRvbmx5IFBPT0xfQ0FDSEVfS0VZID0gKGNoYWluSWQ6IENoYWluSWQsIGFkZHJlc3M6IHN0cmluZykgPT4gYHBvb2wtJHtjaGFpbklkfS0ke2FkZHJlc3N9YFxuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBjaGFpbklkOiBDaGFpbklkLCBwcm90ZWN0ZWQgcG9vbFByb3ZpZGVyOiBJVjNQb29sUHJvdmlkZXIsIHRhYmxlTmFtZTogc3RyaW5nKSB7XG4gICAgdGhpcy5keW5hbW9DYWNoZSA9IG5ldyBEeW5hbW9DYWNoaW5nVjNQb29sKHsgdGFibGVOYW1lLCB0dGxNaW51dGVzOiAxIH0pXG4gIH1cblxuICBwdWJsaWMgZ2V0UG9vbEFkZHJlc3MoXG4gICAgdG9rZW5BOiBUb2tlbixcbiAgICB0b2tlbkI6IFRva2VuLFxuICAgIGZlZUFtb3VudDogRmVlQW1vdW50XG4gICk6IHtcbiAgICBwb29sQWRkcmVzczogc3RyaW5nXG4gICAgdG9rZW4wOiBUb2tlblxuICAgIHRva2VuMTogVG9rZW5cbiAgfSB7XG4gICAgcmV0dXJuIHRoaXMucG9vbFByb3ZpZGVyLmdldFBvb2xBZGRyZXNzKHRva2VuQSwgdG9rZW5CLCBmZWVBbW91bnQpXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2V0UG9vbHMoXG4gICAgdG9rZW5QYWlyczogW1Rva2VuLCBUb2tlbiwgRmVlQW1vdW50XVtdLFxuICAgIHByb3ZpZGVyQ29uZmlnPzogUHJvdmlkZXJDb25maWdcbiAgKTogUHJvbWlzZTxWM1Bvb2xBY2Nlc3Nvcj4ge1xuICAgIGNvbnN0IHBvb2xBZGRyZXNzU2V0OiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQ8c3RyaW5nPigpXG4gICAgY29uc3QgcG9vbHNUb0dldFRva2VuUGFpcnM6IEFycmF5PFtUb2tlbiwgVG9rZW4sIEZlZUFtb3VudF0+ID0gW11cbiAgICBjb25zdCBwb29sc1RvR2V0QWRkcmVzc2VzOiBzdHJpbmdbXSA9IFtdXG4gICAgY29uc3QgcG9vbEFkZHJlc3NUb1Bvb2w6IHsgW3Bvb2xBZGRyZXNzOiBzdHJpbmddOiBQb29sIH0gPSB7fVxuICAgIGNvbnN0IGJsb2NrTnVtYmVyOiBudW1iZXIgfCB1bmRlZmluZWQgPSBhd2FpdCBwcm92aWRlckNvbmZpZz8uYmxvY2tOdW1iZXJcblxuICAgIGZvciAoY29uc3QgW3Rva2VuQSwgdG9rZW5CLCBmZWVBbW91bnRdIG9mIHRva2VuUGFpcnMpIHtcbiAgICAgIGNvbnN0IHsgcG9vbEFkZHJlc3MsIHRva2VuMCwgdG9rZW4xIH0gPSB0aGlzLmdldFBvb2xBZGRyZXNzKHRva2VuQSwgdG9rZW5CLCBmZWVBbW91bnQpXG5cbiAgICAgIGlmIChwb29sQWRkcmVzc1NldC5oYXMocG9vbEFkZHJlc3MpKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHBvb2xBZGRyZXNzU2V0LmFkZChwb29sQWRkcmVzcylcblxuICAgICAgY29uc3QgcGFydGl0aW9uS2V5ID0gdGhpcy5QT09MX0NBQ0hFX0tFWSh0aGlzLmNoYWluSWQsIHBvb2xBZGRyZXNzKVxuICAgICAgY29uc3QgY2FjaGVkUG9vbCA9IGF3YWl0IHRoaXMuZHluYW1vQ2FjaGUuZ2V0KHBhcnRpdGlvbktleSwgYmxvY2tOdW1iZXIpXG4gICAgICBpZiAoY2FjaGVkUG9vbCkge1xuICAgICAgICBwb29sQWRkcmVzc1RvUG9vbFtwb29sQWRkcmVzc10gPSBjYWNoZWRQb29sXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHBvb2xzVG9HZXRUb2tlblBhaXJzLnB1c2goW3Rva2VuMCwgdG9rZW4xLCBmZWVBbW91bnRdKVxuICAgICAgcG9vbHNUb0dldEFkZHJlc3Nlcy5wdXNoKHBvb2xBZGRyZXNzKVxuICAgIH1cblxuICAgIGlmIChwb29sc1RvR2V0QWRkcmVzc2VzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IHBvb2xBY2Nlc3NvciA9IGF3YWl0IHRoaXMucG9vbFByb3ZpZGVyLmdldFBvb2xzKHBvb2xzVG9HZXRUb2tlblBhaXJzLCBwcm92aWRlckNvbmZpZylcbiAgICAgIGZvciAoY29uc3QgYWRkcmVzcyBvZiBwb29sc1RvR2V0QWRkcmVzc2VzKSB7XG4gICAgICAgIGNvbnN0IHBvb2wgPSBwb29sQWNjZXNzb3IuZ2V0UG9vbEJ5QWRkcmVzcyhhZGRyZXNzKVxuICAgICAgICBpZiAocG9vbCkge1xuICAgICAgICAgIHBvb2xBZGRyZXNzVG9Qb29sW2FkZHJlc3NdID0gcG9vbFxuXG4gICAgICAgICAgY29uc3QgcGFydGl0aW9uS2V5ID0gdGhpcy5QT09MX0NBQ0hFX0tFWSh0aGlzLmNoYWluSWQsIGFkZHJlc3MpXG4gICAgICAgICAgYXdhaXQgdGhpcy5keW5hbW9DYWNoZS5zZXQocG9vbCwgcGFydGl0aW9uS2V5LCBibG9ja051bWJlcilcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBnZXRQb29sOiAodG9rZW5BOiBUb2tlbiwgdG9rZW5COiBUb2tlbiwgZmVlQW1vdW50OiBGZWVBbW91bnQpOiBQb29sIHwgdW5kZWZpbmVkID0+IHtcbiAgICAgICAgY29uc3QgeyBwb29sQWRkcmVzcyB9ID0gdGhpcy5nZXRQb29sQWRkcmVzcyh0b2tlbkEsIHRva2VuQiwgZmVlQW1vdW50KVxuICAgICAgICByZXR1cm4gcG9vbEFkZHJlc3NUb1Bvb2xbcG9vbEFkZHJlc3NdXG4gICAgICB9LFxuICAgICAgZ2V0UG9vbEJ5QWRkcmVzczogKGFkZHJlc3M6IHN0cmluZyk6IFBvb2wgfCB1bmRlZmluZWQgPT4gcG9vbEFkZHJlc3NUb1Bvb2xbYWRkcmVzc10sXG4gICAgICBnZXRBbGxQb29sczogKCk6IFBvb2xbXSA9PiBPYmplY3QudmFsdWVzKHBvb2xBZGRyZXNzVG9Qb29sKSxcbiAgICB9XG4gIH1cbn1cbiJdfQ==