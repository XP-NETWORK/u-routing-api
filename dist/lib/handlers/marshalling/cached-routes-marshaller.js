import { CachedRoutes } from '@uniswap/smart-order-router';
import { TokenMarshaller } from './token-marshaller';
import { CachedRouteMarshaller } from './cached-route-marshaller';
export class CachedRoutesMarshaller {
    static marshal(cachedRoutes) {
        return {
            routes: cachedRoutes.routes.map((route) => CachedRouteMarshaller.marshal(route)),
            chainId: cachedRoutes.chainId,
            tokenIn: TokenMarshaller.marshal(cachedRoutes.tokenIn),
            tokenOut: TokenMarshaller.marshal(cachedRoutes.tokenOut),
            protocolsCovered: cachedRoutes.protocolsCovered,
            blockNumber: cachedRoutes.blockNumber,
            tradeType: cachedRoutes.tradeType,
            originalAmount: cachedRoutes.originalAmount,
            blocksToLive: cachedRoutes.blocksToLive,
        };
    }
    static unmarshal(marshalledCachedRoutes) {
        return new CachedRoutes({
            routes: marshalledCachedRoutes.routes.map((route) => CachedRouteMarshaller.unmarshal(route)),
            chainId: marshalledCachedRoutes.chainId,
            tokenIn: TokenMarshaller.unmarshal(marshalledCachedRoutes.tokenIn),
            tokenOut: TokenMarshaller.unmarshal(marshalledCachedRoutes.tokenOut),
            protocolsCovered: marshalledCachedRoutes.protocolsCovered,
            blockNumber: marshalledCachedRoutes.blockNumber,
            tradeType: marshalledCachedRoutes.tradeType,
            originalAmount: marshalledCachedRoutes.originalAmount,
            blocksToLive: marshalledCachedRoutes.blocksToLive,
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGVkLXJvdXRlcy1tYXJzaGFsbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vbGliL2hhbmRsZXJzL21hcnNoYWxsaW5nL2NhY2hlZC1yb3V0ZXMtbWFyc2hhbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNkJBQTZCLENBQUE7QUFHMUQsT0FBTyxFQUFtQixlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQTtBQUNyRSxPQUFPLEVBQUUscUJBQXFCLEVBQXlCLE1BQU0sMkJBQTJCLENBQUE7QUFjeEYsTUFBTSxPQUFPLHNCQUFzQjtJQUMxQixNQUFNLENBQUMsT0FBTyxDQUFDLFlBQTBCO1FBQzlDLE9BQU87WUFDTCxNQUFNLEVBQUUsWUFBWSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNoRixPQUFPLEVBQUUsWUFBWSxDQUFDLE9BQU87WUFDN0IsT0FBTyxFQUFFLGVBQWUsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQztZQUN0RCxRQUFRLEVBQUUsZUFBZSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDO1lBQ3hELGdCQUFnQixFQUFFLFlBQVksQ0FBQyxnQkFBZ0I7WUFDL0MsV0FBVyxFQUFFLFlBQVksQ0FBQyxXQUFXO1lBQ3JDLFNBQVMsRUFBRSxZQUFZLENBQUMsU0FBUztZQUNqQyxjQUFjLEVBQUUsWUFBWSxDQUFDLGNBQWM7WUFDM0MsWUFBWSxFQUFFLFlBQVksQ0FBQyxZQUFZO1NBQ3hDLENBQUE7SUFDSCxDQUFDO0lBRU0sTUFBTSxDQUFDLFNBQVMsQ0FBQyxzQkFBOEM7UUFDcEUsT0FBTyxJQUFJLFlBQVksQ0FBQztZQUN0QixNQUFNLEVBQUUsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMscUJBQXFCLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzVGLE9BQU8sRUFBRSxzQkFBc0IsQ0FBQyxPQUFPO1lBQ3ZDLE9BQU8sRUFBRSxlQUFlLENBQUMsU0FBUyxDQUFDLHNCQUFzQixDQUFDLE9BQU8sQ0FBQztZQUNsRSxRQUFRLEVBQUUsZUFBZSxDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsQ0FBQyxRQUFRLENBQUM7WUFDcEUsZ0JBQWdCLEVBQUUsc0JBQXNCLENBQUMsZ0JBQWdCO1lBQ3pELFdBQVcsRUFBRSxzQkFBc0IsQ0FBQyxXQUFXO1lBQy9DLFNBQVMsRUFBRSxzQkFBc0IsQ0FBQyxTQUFTO1lBQzNDLGNBQWMsRUFBRSxzQkFBc0IsQ0FBQyxjQUFjO1lBQ3JELFlBQVksRUFBRSxzQkFBc0IsQ0FBQyxZQUFZO1NBQ2xELENBQUMsQ0FBQTtJQUNKLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENhY2hlZFJvdXRlcyB9IGZyb20gJ0B1bmlzd2FwL3NtYXJ0LW9yZGVyLXJvdXRlcidcbmltcG9ydCB7IENoYWluSWQsIFRyYWRlVHlwZSB9IGZyb20gJ0B1bmlzd2FwL3Nkay1jb3JlJ1xuaW1wb3J0IHsgUHJvdG9jb2wgfSBmcm9tICdAdW5pc3dhcC9yb3V0ZXItc2RrJ1xuaW1wb3J0IHsgTWFyc2hhbGxlZFRva2VuLCBUb2tlbk1hcnNoYWxsZXIgfSBmcm9tICcuL3Rva2VuLW1hcnNoYWxsZXInXG5pbXBvcnQgeyBDYWNoZWRSb3V0ZU1hcnNoYWxsZXIsIE1hcnNoYWxsZWRDYWNoZWRSb3V0ZSB9IGZyb20gJy4vY2FjaGVkLXJvdXRlLW1hcnNoYWxsZXInXG5cbmV4cG9ydCBpbnRlcmZhY2UgTWFyc2hhbGxlZENhY2hlZFJvdXRlcyB7XG4gIHJvdXRlczogTWFyc2hhbGxlZENhY2hlZFJvdXRlW11cbiAgY2hhaW5JZDogQ2hhaW5JZFxuICB0b2tlbkluOiBNYXJzaGFsbGVkVG9rZW5cbiAgdG9rZW5PdXQ6IE1hcnNoYWxsZWRUb2tlblxuICBwcm90b2NvbHNDb3ZlcmVkOiBQcm90b2NvbFtdXG4gIGJsb2NrTnVtYmVyOiBudW1iZXJcbiAgdHJhZGVUeXBlOiBUcmFkZVR5cGVcbiAgb3JpZ2luYWxBbW91bnQ6IHN0cmluZ1xuICBibG9ja3NUb0xpdmU6IG51bWJlclxufVxuXG5leHBvcnQgY2xhc3MgQ2FjaGVkUm91dGVzTWFyc2hhbGxlciB7XG4gIHB1YmxpYyBzdGF0aWMgbWFyc2hhbChjYWNoZWRSb3V0ZXM6IENhY2hlZFJvdXRlcyk6IE1hcnNoYWxsZWRDYWNoZWRSb3V0ZXMge1xuICAgIHJldHVybiB7XG4gICAgICByb3V0ZXM6IGNhY2hlZFJvdXRlcy5yb3V0ZXMubWFwKChyb3V0ZSkgPT4gQ2FjaGVkUm91dGVNYXJzaGFsbGVyLm1hcnNoYWwocm91dGUpKSxcbiAgICAgIGNoYWluSWQ6IGNhY2hlZFJvdXRlcy5jaGFpbklkLFxuICAgICAgdG9rZW5JbjogVG9rZW5NYXJzaGFsbGVyLm1hcnNoYWwoY2FjaGVkUm91dGVzLnRva2VuSW4pLFxuICAgICAgdG9rZW5PdXQ6IFRva2VuTWFyc2hhbGxlci5tYXJzaGFsKGNhY2hlZFJvdXRlcy50b2tlbk91dCksXG4gICAgICBwcm90b2NvbHNDb3ZlcmVkOiBjYWNoZWRSb3V0ZXMucHJvdG9jb2xzQ292ZXJlZCxcbiAgICAgIGJsb2NrTnVtYmVyOiBjYWNoZWRSb3V0ZXMuYmxvY2tOdW1iZXIsXG4gICAgICB0cmFkZVR5cGU6IGNhY2hlZFJvdXRlcy50cmFkZVR5cGUsXG4gICAgICBvcmlnaW5hbEFtb3VudDogY2FjaGVkUm91dGVzLm9yaWdpbmFsQW1vdW50LFxuICAgICAgYmxvY2tzVG9MaXZlOiBjYWNoZWRSb3V0ZXMuYmxvY2tzVG9MaXZlLFxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgdW5tYXJzaGFsKG1hcnNoYWxsZWRDYWNoZWRSb3V0ZXM6IE1hcnNoYWxsZWRDYWNoZWRSb3V0ZXMpOiBDYWNoZWRSb3V0ZXMge1xuICAgIHJldHVybiBuZXcgQ2FjaGVkUm91dGVzKHtcbiAgICAgIHJvdXRlczogbWFyc2hhbGxlZENhY2hlZFJvdXRlcy5yb3V0ZXMubWFwKChyb3V0ZSkgPT4gQ2FjaGVkUm91dGVNYXJzaGFsbGVyLnVubWFyc2hhbChyb3V0ZSkpLFxuICAgICAgY2hhaW5JZDogbWFyc2hhbGxlZENhY2hlZFJvdXRlcy5jaGFpbklkLFxuICAgICAgdG9rZW5JbjogVG9rZW5NYXJzaGFsbGVyLnVubWFyc2hhbChtYXJzaGFsbGVkQ2FjaGVkUm91dGVzLnRva2VuSW4pLFxuICAgICAgdG9rZW5PdXQ6IFRva2VuTWFyc2hhbGxlci51bm1hcnNoYWwobWFyc2hhbGxlZENhY2hlZFJvdXRlcy50b2tlbk91dCksXG4gICAgICBwcm90b2NvbHNDb3ZlcmVkOiBtYXJzaGFsbGVkQ2FjaGVkUm91dGVzLnByb3RvY29sc0NvdmVyZWQsXG4gICAgICBibG9ja051bWJlcjogbWFyc2hhbGxlZENhY2hlZFJvdXRlcy5ibG9ja051bWJlcixcbiAgICAgIHRyYWRlVHlwZTogbWFyc2hhbGxlZENhY2hlZFJvdXRlcy50cmFkZVR5cGUsXG4gICAgICBvcmlnaW5hbEFtb3VudDogbWFyc2hhbGxlZENhY2hlZFJvdXRlcy5vcmlnaW5hbEFtb3VudCxcbiAgICAgIGJsb2Nrc1RvTGl2ZTogbWFyc2hhbGxlZENhY2hlZFJvdXRlcy5ibG9ja3NUb0xpdmUsXG4gICAgfSlcbiAgfVxufVxuIl19