import { ethers } from 'ethers';
import { metric, MetricLoggerUnit } from '@uniswap/smart-order-router';
export class InstrumentedEVMProvider extends ethers.providers.StaticJsonRpcProvider {
    constructor({ url, network, name }) {
        super(url, network);
        this.name = name;
        this.metricPrefix = `RPC_${this.name}_${this.network.chainId}`;
    }
    call(transaction, blockTag) {
        const before = Date.now();
        const result = super
            .call(transaction, blockTag)
            .then((response) => {
            metric.putMetric(`${this.metricPrefix}_CALL_SUCCESS`, 1, MetricLoggerUnit.Count);
            return response;
        }, (error) => {
            metric.putMetric(`${this.metricPrefix}_CALL_FAILURE`, 1, MetricLoggerUnit.Count);
            throw error;
        })
            .finally(() => {
            metric.putMetric(`${this.metricPrefix}_CALL_REQUESTED`, 1, MetricLoggerUnit.Count);
            metric.putMetric(`${this.metricPrefix}_CALL_LATENCY`, Date.now() - before, MetricLoggerUnit.Milliseconds);
        });
        return result;
    }
    estimateGas(transaction) {
        return super
            .estimateGas(transaction)
            .then((response) => {
            metric.putMetric(`${this.metricPrefix}_ESTIMATEGAS_SUCCESS`, 1, MetricLoggerUnit.Count);
            return response;
        }, (error) => {
            metric.putMetric(`${this.metricPrefix}_ESTIMATEGAS_FAILURE`, 1, MetricLoggerUnit.Count);
            throw error;
        })
            .finally(() => metric.putMetric(`${this.metricPrefix}_ESTIMATEGAS_REQUESTED`, 1, MetricLoggerUnit.Count));
    }
    getBalance(addressOrName, blockTag) {
        return super
            .getBalance(addressOrName, blockTag)
            .then((response) => {
            metric.putMetric(`${this.metricPrefix}_GETBALANCE_SUCCESS`, 1, MetricLoggerUnit.Count);
            return response;
        }, (error) => {
            metric.putMetric(`${this.metricPrefix}_GETBALANCE_FAILURE`, 1, MetricLoggerUnit.Count);
            throw error;
        })
            .finally(() => metric.putMetric(`${this.metricPrefix}_GETBALANCE_REQUESTED`, 1, MetricLoggerUnit.Count));
    }
    getBlock(blockHashOrBlockTag) {
        return super
            .getBlock(blockHashOrBlockTag)
            .then((response) => {
            metric.putMetric(`${this.metricPrefix}_GETBLOCK_SUCCESS`, 1, MetricLoggerUnit.Count);
            return response;
        }, (error) => {
            metric.putMetric(`${this.metricPrefix}_GETBLOCK_FAILURE`, 1, MetricLoggerUnit.Count);
            throw error;
        })
            .finally(() => metric.putMetric(`${this.metricPrefix}_GETBLOCK_REQUESTED`, 1, MetricLoggerUnit.Count));
    }
    getBlockNumber() {
        return super
            .getBlockNumber()
            .then((response) => {
            metric.putMetric(`${this.metricPrefix}_GETBLOCKNUMBER_SUCCESS`, 1, MetricLoggerUnit.Count);
            return response;
        }, (error) => {
            metric.putMetric(`${this.metricPrefix}_GETBLOCKNUMBER_FAILURE`, 1, MetricLoggerUnit.Count);
            throw error;
        })
            .finally(() => metric.putMetric(`${this.metricPrefix}_GETBLOCKNUMBER_REQUESTED`, 1, MetricLoggerUnit.Count));
    }
    getBlockWithTransactions(blockHashOrBlockTag) {
        return super
            .getBlockWithTransactions(blockHashOrBlockTag)
            .then((response) => {
            metric.putMetric(`${this.metricPrefix}_GETBLOCKWITHTRANSACTION_SUCCESS`, 1, MetricLoggerUnit.Count);
            return response;
        }, (error) => {
            metric.putMetric(`${this.metricPrefix}_GETBLOCKWITHTRANSACTION_FAILURE`, 1, MetricLoggerUnit.Count);
            throw error;
        })
            .finally(() => metric.putMetric(`${this.metricPrefix}_GETBLOCKWITHTRANSACTION_REQUESTED`, 1, MetricLoggerUnit.Count));
    }
    getCode(addressOrName, blockTag) {
        return super
            .getCode(addressOrName, blockTag)
            .then((response) => {
            metric.putMetric(`${this.metricPrefix}_GETCODE_SUCCESS`, 1, MetricLoggerUnit.Count);
            return response;
        }, (error) => {
            metric.putMetric(`${this.metricPrefix}_GETCODE_FAILURE`, 1, MetricLoggerUnit.Count);
            throw error;
        })
            .finally(() => metric.putMetric(`${this.metricPrefix}_GETCODE_REQUESTED`, 1, MetricLoggerUnit.Count));
    }
    getGasPrice() {
        return super
            .getGasPrice()
            .then((response) => {
            metric.putMetric(`${this.metricPrefix}_GETGASPRICE_SUCCESS`, 1, MetricLoggerUnit.Count);
            return response;
        }, (error) => {
            metric.putMetric(`${this.metricPrefix}_GETGASPRICE_FAILURE`, 1, MetricLoggerUnit.Count);
            throw error;
        })
            .finally(() => metric.putMetric(`${this.metricPrefix}_GETGASPRICE_REQUESTED`, 1, MetricLoggerUnit.Count));
    }
    getLogs(filter) {
        return super
            .getLogs(filter)
            .then((response) => {
            metric.putMetric(`${this.metricPrefix}_GETLOGS_SUCCESS`, 1, MetricLoggerUnit.Count);
            return response;
        }, (error) => {
            metric.putMetric(`${this.metricPrefix}_GETLOGS_FAILURE`, 1, MetricLoggerUnit.Count);
            throw error;
        })
            .finally(() => metric.putMetric(`${this.metricPrefix}_GETLOGS_REQUESTED`, 1, MetricLoggerUnit.Count));
    }
    getNetwork() {
        return super
            .getNetwork()
            .then((response) => {
            metric.putMetric(`${this.metricPrefix}_GETNETWORK_SUCCESS`, 1, MetricLoggerUnit.Count);
            return response;
        }, (error) => {
            metric.putMetric(`${this.metricPrefix}_GETNETWORK_FAILURE`, 1, MetricLoggerUnit.Count);
            throw error;
        })
            .finally(() => metric.putMetric(`${this.metricPrefix}_GETNETWORK_REQUESTED`, 1, MetricLoggerUnit.Count));
    }
    getStorageAt(addressOrName, position, blockTag) {
        return super
            .getStorageAt(addressOrName, position, blockTag)
            .then((response) => {
            metric.putMetric(`${this.metricPrefix}_GETSTORAGEAT_SUCCESS`, 1, MetricLoggerUnit.Count);
            return response;
        }, (error) => {
            metric.putMetric(`${this.metricPrefix}_GETSTORAGEAT_FAILURE`, 1, MetricLoggerUnit.Count);
            throw error;
        })
            .finally(() => metric.putMetric(`${this.metricPrefix}_GETSTORAGEAT_REQUESTED`, 1, MetricLoggerUnit.Count));
    }
    getTransaction(transactionHash) {
        return super
            .getTransaction(transactionHash)
            .then((response) => {
            metric.putMetric(`${this.metricPrefix}_GETTRANSACTION_SUCCESS`, 1, MetricLoggerUnit.Count);
            return response;
        }, (error) => {
            metric.putMetric(`${this.metricPrefix}_GETTRANSACTION_FAILURE`, 1, MetricLoggerUnit.Count);
            throw error;
        })
            .finally(() => metric.putMetric(`${this.metricPrefix}_GETTRANSACTION_REQUESTED`, 1, MetricLoggerUnit.Count));
    }
    getTransactionCount(addressOrName, blockTag) {
        return super
            .getTransactionCount(addressOrName, blockTag)
            .then((response) => {
            metric.putMetric(`${this.metricPrefix}_GETTRANSACTIONCOUNT_SUCCESS`, 1, MetricLoggerUnit.Count);
            return response;
        }, (error) => {
            metric.putMetric(`${this.metricPrefix}_GETTRANSACTIONCOUNT_FAILURE`, 1, MetricLoggerUnit.Count);
            throw error;
        })
            .finally(() => metric.putMetric(`${this.metricPrefix}_GETTRANSACTIONCOUNT_REQUESTED`, 1, MetricLoggerUnit.Count));
    }
    getTransactionReceipt(transactionHash) {
        return super
            .getTransactionReceipt(transactionHash)
            .then((response) => {
            metric.putMetric(`${this.metricPrefix}_GETTRANSACTIONRECEIPT_SUCCESS`, 1, MetricLoggerUnit.Count);
            return response;
        }, (error) => {
            metric.putMetric(`${this.metricPrefix}_GETTRANSACTIONRECEIPT_FAILURE`, 1, MetricLoggerUnit.Count);
            throw error;
        })
            .finally(() => metric.putMetric(`${this.metricPrefix}_GETTRANSACTIONRECEIPT_REQUESTED`, 1, MetricLoggerUnit.Count));
    }
    lookupAddress(address) {
        return super
            .lookupAddress(address)
            .then((response) => {
            metric.putMetric(`${this.metricPrefix}_LOOKUPADDRESS_SUCCESS`, 1, MetricLoggerUnit.Count);
            return response;
        }, (error) => {
            metric.putMetric(`${this.metricPrefix}_LOOKUPADDRESS_FAILURE`, 1, MetricLoggerUnit.Count);
            throw error;
        })
            .finally(() => metric.putMetric(`${this.metricPrefix}_LOOKUPADDRESS_REQUESTED`, 1, MetricLoggerUnit.Count));
    }
    resolveName(name) {
        return super
            .resolveName(name)
            .then((response) => {
            metric.putMetric(`${this.metricPrefix}_RESOLVENAME_SUCCESS`, 1, MetricLoggerUnit.Count);
            return response;
        }, (error) => {
            metric.putMetric(`${this.metricPrefix}_RESOLVENAME_FAILURE`, 1, MetricLoggerUnit.Count);
            throw error;
        })
            .finally(() => metric.putMetric(`${this.metricPrefix}_RESOLVENAME_REQUESTED`, 1, MetricLoggerUnit.Count));
    }
    sendTransaction(signedTransaction) {
        return super
            .sendTransaction(signedTransaction)
            .then((response) => {
            metric.putMetric(`${this.metricPrefix}_SENDTRANSACTION_SUCCESS`, 1, MetricLoggerUnit.Count);
            return response;
        }, (error) => {
            metric.putMetric(`${this.metricPrefix}_SENDTRANSACTION_FAILURE`, 1, MetricLoggerUnit.Count);
            throw error;
        })
            .finally(() => metric.putMetric(`${this.metricPrefix}_SENDTRANSACTION_REQUESTED`, 1, MetricLoggerUnit.Count));
    }
    waitForTransaction(transactionHash, confirmations, timeout) {
        return super
            .waitForTransaction(transactionHash, confirmations, timeout)
            .then((response) => {
            metric.putMetric(`${this.metricPrefix}_WAITFORTRANSACTION_SUCCESS`, 1, MetricLoggerUnit.Count);
            return response;
        }, (error) => {
            metric.putMetric(`${this.metricPrefix}_WAITFORTRANSACTION_FAILURE`, 1, MetricLoggerUnit.Count);
            throw error;
        })
            .finally(() => metric.putMetric(`${this.metricPrefix}_WAITFORTRANSACTION_REQUESTED`, 1, MetricLoggerUnit.Count));
    }
}
//# sourceMappingURL=data:application/json;base64,