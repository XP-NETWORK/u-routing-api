import { setGlobalLogger } from '@uniswap/smart-order-router';
import { S3 } from 'aws-sdk';
import { default as bunyan } from 'bunyan';
import { S3_POOL_CACHE_KEY } from '../util/pool-cache-key';
import { chainProtocols } from './cache-config';
const handler = async (event) => {
    const chainId = parseInt(process.env.chainId);
    const protocol = process.env.protocol;
    // Don't retry for V2 as it will timeout and throw 500
    const provider = chainProtocols.find((element) => element.protocol == protocol && element.chainId == chainId).provider;
    const log = bunyan.createLogger({
        name: 'RoutingLambda',
        serializers: bunyan.stdSerializers,
        level: 'info',
        requestId: event.id,
    });
    setGlobalLogger(log);
    const s3 = new S3();
    log.info(`Getting pools for ${protocol} on ${chainId}`);
    let pools;
    try {
        pools = await provider.getPools();
    }
    catch (err) {
        log.error({ err }, `Failed to get pools for ${protocol} on ${chainId}`);
        throw new Error(`Failed to get pools for ${protocol} on ${chainId}`);
    }
    if (!pools || pools.length == 0) {
        log.info(`No ${protocol} pools found from the subgraph for ${chainId.toString()}`);
        return;
    }
    const key = S3_POOL_CACHE_KEY(process.env.POOL_CACHE_KEY, chainId, protocol);
    log.info(`Got ${pools.length} ${protocol} pools from the subgraph for ${chainId.toString()}. Saving to ${key}`);
    const result = await s3
        .putObject({
        Bucket: process.env.POOL_CACHE_BUCKET_2,
        Key: key,
        Body: JSON.stringify(pools),
    })
        .promise();
    log.info({ result }, `Done ${protocol} for ${chainId.toString()}`);
    log.info(`Successfully cached ${chainId} ${protocol} pools to S3`);
};
module.exports = { handler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUtcG9vbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvY3Jvbi9jYWNoZS1wb29scy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNkJBQTZCLENBQUE7QUFFN0QsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLFNBQVMsQ0FBQTtBQUU1QixPQUFPLEVBQUUsT0FBTyxJQUFJLE1BQU0sRUFBcUIsTUFBTSxRQUFRLENBQUE7QUFDN0QsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sd0JBQXdCLENBQUE7QUFDMUQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGdCQUFnQixDQUFBO0FBRS9DLE1BQU0sT0FBTyxHQUFxQixLQUFLLEVBQUUsS0FBcUMsRUFBRSxFQUFFO0lBQ2hGLE1BQU0sT0FBTyxHQUFZLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQVEsQ0FBQyxDQUFBO0lBQ3ZELE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBcUIsQ0FBQTtJQUNsRCxzREFBc0Q7SUFDdEQsTUFBTSxRQUFRLEdBQUcsY0FBYyxDQUFDLElBQUksQ0FDbEMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLElBQUksUUFBUSxJQUFJLE9BQU8sQ0FBQyxPQUFPLElBQUksT0FBTyxDQUN2RSxDQUFDLFFBQVEsQ0FBQTtJQUNYLE1BQU0sR0FBRyxHQUFXLE1BQU0sQ0FBQyxZQUFZLENBQUM7UUFDdEMsSUFBSSxFQUFFLGVBQWU7UUFDckIsV0FBVyxFQUFFLE1BQU0sQ0FBQyxjQUFjO1FBQ2xDLEtBQUssRUFBRSxNQUFNO1FBQ2IsU0FBUyxFQUFFLEtBQUssQ0FBQyxFQUFFO0tBQ3BCLENBQUMsQ0FBQTtJQUNGLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUVwQixNQUFNLEVBQUUsR0FBRyxJQUFJLEVBQUUsRUFBRSxDQUFBO0lBRW5CLEdBQUcsQ0FBQyxJQUFJLENBQUMscUJBQXFCLFFBQVEsT0FBTyxPQUFPLEVBQUUsQ0FBQyxDQUFBO0lBRXZELElBQUksS0FBSyxDQUFBO0lBQ1QsSUFBSTtRQUNGLEtBQUssR0FBRyxNQUFNLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQTtLQUNsQztJQUFDLE9BQU8sR0FBRyxFQUFFO1FBQ1osR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLDJCQUEyQixRQUFRLE9BQU8sT0FBTyxFQUFFLENBQUMsQ0FBQTtRQUN2RSxNQUFNLElBQUksS0FBSyxDQUFDLDJCQUEyQixRQUFRLE9BQU8sT0FBTyxFQUFFLENBQUMsQ0FBQTtLQUNyRTtJQUVELElBQUksQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7UUFDL0IsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLFFBQVEsc0NBQXNDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUE7UUFDbEYsT0FBTTtLQUNQO0lBRUQsTUFBTSxHQUFHLEdBQUcsaUJBQWlCLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFlLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBRTdFLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLENBQUMsTUFBTSxJQUFJLFFBQVEsZ0NBQWdDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsZUFBZSxHQUFHLEVBQUUsQ0FBQyxDQUFBO0lBRS9HLE1BQU0sTUFBTSxHQUFHLE1BQU0sRUFBRTtTQUNwQixTQUFTLENBQUM7UUFDVCxNQUFNLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBb0I7UUFDeEMsR0FBRyxFQUFFLEdBQUc7UUFDUixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7S0FDNUIsQ0FBQztTQUNELE9BQU8sRUFBRSxDQUFBO0lBRVosR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLFFBQVEsUUFBUSxRQUFRLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFFbEUsR0FBRyxDQUFDLElBQUksQ0FBQyx1QkFBdUIsT0FBTyxJQUFJLFFBQVEsY0FBYyxDQUFDLENBQUE7QUFDcEUsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRyxFQUFFLE9BQU8sRUFBRSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJvdG9jb2wgfSBmcm9tICdAdW5pc3dhcC9yb3V0ZXItc2RrJ1xuaW1wb3J0IHsgc2V0R2xvYmFsTG9nZ2VyIH0gZnJvbSAnQHVuaXN3YXAvc21hcnQtb3JkZXItcm91dGVyJ1xuaW1wb3J0IHsgRXZlbnRCcmlkZ2VFdmVudCwgU2NoZWR1bGVkSGFuZGxlciB9IGZyb20gJ2F3cy1sYW1iZGEnXG5pbXBvcnQgeyBTMyB9IGZyb20gJ2F3cy1zZGsnXG5pbXBvcnQgeyBDaGFpbklkIH0gZnJvbSAnQHVuaXN3YXAvc2RrLWNvcmUnXG5pbXBvcnQgeyBkZWZhdWx0IGFzIGJ1bnlhbiwgZGVmYXVsdCBhcyBMb2dnZXIgfSBmcm9tICdidW55YW4nXG5pbXBvcnQgeyBTM19QT09MX0NBQ0hFX0tFWSB9IGZyb20gJy4uL3V0aWwvcG9vbC1jYWNoZS1rZXknXG5pbXBvcnQgeyBjaGFpblByb3RvY29scyB9IGZyb20gJy4vY2FjaGUtY29uZmlnJ1xuXG5jb25zdCBoYW5kbGVyOiBTY2hlZHVsZWRIYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBFdmVudEJyaWRnZUV2ZW50PHN0cmluZywgdm9pZD4pID0+IHtcbiAgY29uc3QgY2hhaW5JZDogQ2hhaW5JZCA9IHBhcnNlSW50KHByb2Nlc3MuZW52LmNoYWluSWQhKVxuICBjb25zdCBwcm90b2NvbCA9IHByb2Nlc3MuZW52LnByb3RvY29sISBhcyBQcm90b2NvbFxuICAvLyBEb24ndCByZXRyeSBmb3IgVjIgYXMgaXQgd2lsbCB0aW1lb3V0IGFuZCB0aHJvdyA1MDBcbiAgY29uc3QgcHJvdmlkZXIgPSBjaGFpblByb3RvY29scy5maW5kKFxuICAgIChlbGVtZW50KSA9PiBlbGVtZW50LnByb3RvY29sID09IHByb3RvY29sICYmIGVsZW1lbnQuY2hhaW5JZCA9PSBjaGFpbklkXG4gICkhLnByb3ZpZGVyXG4gIGNvbnN0IGxvZzogTG9nZ2VyID0gYnVueWFuLmNyZWF0ZUxvZ2dlcih7XG4gICAgbmFtZTogJ1JvdXRpbmdMYW1iZGEnLFxuICAgIHNlcmlhbGl6ZXJzOiBidW55YW4uc3RkU2VyaWFsaXplcnMsXG4gICAgbGV2ZWw6ICdpbmZvJyxcbiAgICByZXF1ZXN0SWQ6IGV2ZW50LmlkLFxuICB9KVxuICBzZXRHbG9iYWxMb2dnZXIobG9nKVxuXG4gIGNvbnN0IHMzID0gbmV3IFMzKClcblxuICBsb2cuaW5mbyhgR2V0dGluZyBwb29scyBmb3IgJHtwcm90b2NvbH0gb24gJHtjaGFpbklkfWApXG5cbiAgbGV0IHBvb2xzXG4gIHRyeSB7XG4gICAgcG9vbHMgPSBhd2FpdCBwcm92aWRlci5nZXRQb29scygpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZy5lcnJvcih7IGVyciB9LCBgRmFpbGVkIHRvIGdldCBwb29scyBmb3IgJHtwcm90b2NvbH0gb24gJHtjaGFpbklkfWApXG4gICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZ2V0IHBvb2xzIGZvciAke3Byb3RvY29sfSBvbiAke2NoYWluSWR9YClcbiAgfVxuXG4gIGlmICghcG9vbHMgfHwgcG9vbHMubGVuZ3RoID09IDApIHtcbiAgICBsb2cuaW5mbyhgTm8gJHtwcm90b2NvbH0gcG9vbHMgZm91bmQgZnJvbSB0aGUgc3ViZ3JhcGggZm9yICR7Y2hhaW5JZC50b1N0cmluZygpfWApXG4gICAgcmV0dXJuXG4gIH1cblxuICBjb25zdCBrZXkgPSBTM19QT09MX0NBQ0hFX0tFWShwcm9jZXNzLmVudi5QT09MX0NBQ0hFX0tFWSEsIGNoYWluSWQsIHByb3RvY29sKVxuXG4gIGxvZy5pbmZvKGBHb3QgJHtwb29scy5sZW5ndGh9ICR7cHJvdG9jb2x9IHBvb2xzIGZyb20gdGhlIHN1YmdyYXBoIGZvciAke2NoYWluSWQudG9TdHJpbmcoKX0uIFNhdmluZyB0byAke2tleX1gKVxuXG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHMzXG4gICAgLnB1dE9iamVjdCh7XG4gICAgICBCdWNrZXQ6IHByb2Nlc3MuZW52LlBPT0xfQ0FDSEVfQlVDS0VUXzIhLFxuICAgICAgS2V5OiBrZXksXG4gICAgICBCb2R5OiBKU09OLnN0cmluZ2lmeShwb29scyksXG4gICAgfSlcbiAgICAucHJvbWlzZSgpXG5cbiAgbG9nLmluZm8oeyByZXN1bHQgfSwgYERvbmUgJHtwcm90b2NvbH0gZm9yICR7Y2hhaW5JZC50b1N0cmluZygpfWApXG5cbiAgbG9nLmluZm8oYFN1Y2Nlc3NmdWxseSBjYWNoZWQgJHtjaGFpbklkfSAke3Byb3RvY29sfSBwb29scyB0byBTM2ApXG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBoYW5kbGVyIH1cbiJdfQ==