import { Protocol } from '@uniswap/router-sdk';
import { log, metric, MetricLoggerUnit } from '@uniswap/smart-order-router';
export const getDistribution = (distributionPercent) => {
    const percents = new Array();
    for (let i = 1; i <= 100 / distributionPercent; i++) {
        percents.push(i * distributionPercent);
    }
    return percents;
};
export const measureDistributionPercentChangeImpact = (distributionPercentBefore, distributionPercentAfter, bestSwapRoute, currencyIn, currencyOut, tradeType, chainId, amount) => {
    const routesImpacted = new Array();
    const percentDistributionBefore = getDistribution(distributionPercentBefore);
    const percentDistributionAfter = getDistribution(distributionPercentAfter);
    bestSwapRoute.route.forEach((route) => {
        switch (route.protocol) {
            case Protocol.MIXED:
            case Protocol.V3:
                if (percentDistributionBefore.includes(route.percent) && !percentDistributionAfter.includes(route.percent)) {
                    routesImpacted.push(route.toString());
                }
                break;
            case Protocol.V2:
                // if it's v2, there's no distribution, skip the current route
                break;
        }
    });
    if (routesImpacted.length > 0) {
        log.warn(`Distribution percent change impacted the routes ${routesImpacted.join(',')},
      for currency ${currencyIn.wrapped.symbol}
      amount ${amount.toExact()}
      quote currency ${currencyOut.wrapped.symbol}
      trade type ${tradeType}
      chain id ${chainId}`);
        metric.putMetric('BEST_SWAP_ROUTE_DISTRIBUTION_PERCENT_CHANGE_IMPACTED', 1, MetricLoggerUnit.Count);
        metric.putMetric('ROUTES_WITH_VALID_QUOTE_DISTRIBUTION_PERCENT_CHANGE_IMPACTED', routesImpacted.length, MetricLoggerUnit.Count);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxwaGEtY29uZmlnLW1lYXN1cmVtZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL3V0aWwvYWxwaGEtY29uZmlnLW1lYXN1cmVtZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQTtBQUM5QyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxnQkFBZ0IsRUFBYSxNQUFNLDZCQUE2QixDQUFBO0FBRXRGLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxDQUFDLG1CQUEyQixFQUFFLEVBQUU7SUFDN0QsTUFBTSxRQUFRLEdBQWtCLElBQUksS0FBSyxFQUFVLENBQUE7SUFFbkQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEdBQUcsR0FBRyxtQkFBbUIsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNuRCxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxtQkFBbUIsQ0FBQyxDQUFBO0tBQ3ZDO0lBRUQsT0FBTyxRQUFRLENBQUE7QUFDakIsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sc0NBQXNDLEdBQUcsQ0FDcEQseUJBQWlDLEVBQ2pDLHdCQUFnQyxFQUNoQyxhQUF3QixFQUN4QixVQUFvQixFQUNwQixXQUFxQixFQUNyQixTQUFpQixFQUNqQixPQUFnQixFQUNoQixNQUFnQyxFQUNoQyxFQUFFO0lBQ0YsTUFBTSxjQUFjLEdBQWtCLElBQUksS0FBSyxFQUFVLENBQUE7SUFFekQsTUFBTSx5QkFBeUIsR0FBRyxlQUFlLENBQUMseUJBQXlCLENBQUMsQ0FBQTtJQUM1RSxNQUFNLHdCQUF3QixHQUFHLGVBQWUsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFBO0lBRTFFLGFBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7UUFDcEMsUUFBUSxLQUFLLENBQUMsUUFBUSxFQUFFO1lBQ3RCLEtBQUssUUFBUSxDQUFDLEtBQUssQ0FBQztZQUNwQixLQUFLLFFBQVEsQ0FBQyxFQUFFO2dCQUNkLElBQUkseUJBQXlCLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUU7b0JBQzFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUE7aUJBQ3RDO2dCQUNELE1BQUs7WUFDUCxLQUFLLFFBQVEsQ0FBQyxFQUFFO2dCQUNkLDhEQUE4RDtnQkFDOUQsTUFBSztTQUNSO0lBQ0gsQ0FBQyxDQUFDLENBQUE7SUFFRixJQUFJLGNBQWMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQzdCLEdBQUcsQ0FBQyxJQUFJLENBQUMsbURBQW1ELGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO3FCQUNuRSxVQUFVLENBQUMsT0FBTyxDQUFDLE1BQU07ZUFDL0IsTUFBTSxDQUFDLE9BQU8sRUFBRTt1QkFDUixXQUFXLENBQUMsT0FBTyxDQUFDLE1BQU07bUJBQzlCLFNBQVM7aUJBQ1gsT0FBTyxFQUFFLENBQUMsQ0FBQTtRQUN2QixNQUFNLENBQUMsU0FBUyxDQUFDLHNEQUFzRCxFQUFFLENBQUMsRUFBRSxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUNuRyxNQUFNLENBQUMsU0FBUyxDQUNkLDhEQUE4RCxFQUM5RCxjQUFjLENBQUMsTUFBTSxFQUNyQixnQkFBZ0IsQ0FBQyxLQUFLLENBQ3ZCLENBQUE7S0FDRjtBQUNILENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYWluSWQsIEN1cnJlbmN5LCBDdXJyZW5jeUFtb3VudCB9IGZyb20gJ0B1bmlzd2FwL3Nkay1jb3JlJ1xuaW1wb3J0IHsgUHJvdG9jb2wgfSBmcm9tICdAdW5pc3dhcC9yb3V0ZXItc2RrJ1xuaW1wb3J0IHsgbG9nLCBtZXRyaWMsIE1ldHJpY0xvZ2dlclVuaXQsIFN3YXBSb3V0ZSB9IGZyb20gJ0B1bmlzd2FwL3NtYXJ0LW9yZGVyLXJvdXRlcidcblxuZXhwb3J0IGNvbnN0IGdldERpc3RyaWJ1dGlvbiA9IChkaXN0cmlidXRpb25QZXJjZW50OiBudW1iZXIpID0+IHtcbiAgY29uc3QgcGVyY2VudHM6IEFycmF5PG51bWJlcj4gPSBuZXcgQXJyYXk8bnVtYmVyPigpXG5cbiAgZm9yIChsZXQgaSA9IDE7IGkgPD0gMTAwIC8gZGlzdHJpYnV0aW9uUGVyY2VudDsgaSsrKSB7XG4gICAgcGVyY2VudHMucHVzaChpICogZGlzdHJpYnV0aW9uUGVyY2VudClcbiAgfVxuXG4gIHJldHVybiBwZXJjZW50c1xufVxuXG5leHBvcnQgY29uc3QgbWVhc3VyZURpc3RyaWJ1dGlvblBlcmNlbnRDaGFuZ2VJbXBhY3QgPSAoXG4gIGRpc3RyaWJ1dGlvblBlcmNlbnRCZWZvcmU6IG51bWJlcixcbiAgZGlzdHJpYnV0aW9uUGVyY2VudEFmdGVyOiBudW1iZXIsXG4gIGJlc3RTd2FwUm91dGU6IFN3YXBSb3V0ZSxcbiAgY3VycmVuY3lJbjogQ3VycmVuY3ksXG4gIGN1cnJlbmN5T3V0OiBDdXJyZW5jeSxcbiAgdHJhZGVUeXBlOiBzdHJpbmcsXG4gIGNoYWluSWQ6IENoYWluSWQsXG4gIGFtb3VudDogQ3VycmVuY3lBbW91bnQ8Q3VycmVuY3k+XG4pID0+IHtcbiAgY29uc3Qgcm91dGVzSW1wYWN0ZWQ6IEFycmF5PHN0cmluZz4gPSBuZXcgQXJyYXk8c3RyaW5nPigpXG5cbiAgY29uc3QgcGVyY2VudERpc3RyaWJ1dGlvbkJlZm9yZSA9IGdldERpc3RyaWJ1dGlvbihkaXN0cmlidXRpb25QZXJjZW50QmVmb3JlKVxuICBjb25zdCBwZXJjZW50RGlzdHJpYnV0aW9uQWZ0ZXIgPSBnZXREaXN0cmlidXRpb24oZGlzdHJpYnV0aW9uUGVyY2VudEFmdGVyKVxuXG4gIGJlc3RTd2FwUm91dGUucm91dGUuZm9yRWFjaCgocm91dGUpID0+IHtcbiAgICBzd2l0Y2ggKHJvdXRlLnByb3RvY29sKSB7XG4gICAgICBjYXNlIFByb3RvY29sLk1JWEVEOlxuICAgICAgY2FzZSBQcm90b2NvbC5WMzpcbiAgICAgICAgaWYgKHBlcmNlbnREaXN0cmlidXRpb25CZWZvcmUuaW5jbHVkZXMocm91dGUucGVyY2VudCkgJiYgIXBlcmNlbnREaXN0cmlidXRpb25BZnRlci5pbmNsdWRlcyhyb3V0ZS5wZXJjZW50KSkge1xuICAgICAgICAgIHJvdXRlc0ltcGFjdGVkLnB1c2gocm91dGUudG9TdHJpbmcoKSlcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSBQcm90b2NvbC5WMjpcbiAgICAgICAgLy8gaWYgaXQncyB2MiwgdGhlcmUncyBubyBkaXN0cmlidXRpb24sIHNraXAgdGhlIGN1cnJlbnQgcm91dGVcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gIH0pXG5cbiAgaWYgKHJvdXRlc0ltcGFjdGVkLmxlbmd0aCA+IDApIHtcbiAgICBsb2cud2FybihgRGlzdHJpYnV0aW9uIHBlcmNlbnQgY2hhbmdlIGltcGFjdGVkIHRoZSByb3V0ZXMgJHtyb3V0ZXNJbXBhY3RlZC5qb2luKCcsJyl9LFxuICAgICAgZm9yIGN1cnJlbmN5ICR7Y3VycmVuY3lJbi53cmFwcGVkLnN5bWJvbH1cbiAgICAgIGFtb3VudCAke2Ftb3VudC50b0V4YWN0KCl9XG4gICAgICBxdW90ZSBjdXJyZW5jeSAke2N1cnJlbmN5T3V0LndyYXBwZWQuc3ltYm9sfVxuICAgICAgdHJhZGUgdHlwZSAke3RyYWRlVHlwZX1cbiAgICAgIGNoYWluIGlkICR7Y2hhaW5JZH1gKVxuICAgIG1ldHJpYy5wdXRNZXRyaWMoJ0JFU1RfU1dBUF9ST1VURV9ESVNUUklCVVRJT05fUEVSQ0VOVF9DSEFOR0VfSU1QQUNURUQnLCAxLCBNZXRyaWNMb2dnZXJVbml0LkNvdW50KVxuICAgIG1ldHJpYy5wdXRNZXRyaWMoXG4gICAgICAnUk9VVEVTX1dJVEhfVkFMSURfUVVPVEVfRElTVFJJQlVUSU9OX1BFUkNFTlRfQ0hBTkdFX0lNUEFDVEVEJyxcbiAgICAgIHJvdXRlc0ltcGFjdGVkLmxlbmd0aCxcbiAgICAgIE1ldHJpY0xvZ2dlclVuaXQuQ291bnRcbiAgICApXG4gIH1cbn1cbiJdfQ==