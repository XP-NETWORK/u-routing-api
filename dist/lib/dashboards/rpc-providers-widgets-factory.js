import { ChainId } from '@uniswap/sdk-core';
import _ from 'lodash';
import { ID_TO_NETWORK_NAME } from '@uniswap/smart-order-router/build/main/util/chains';
import { ProviderName } from '../handlers/evm/provider/ProviderName';
const ID_TO_PROVIDER = (id) => {
    switch (id) {
        case ChainId.MAINNET:
        case ChainId.OPTIMISM:
        case ChainId.SEPOLIA:
        case ChainId.POLYGON:
        case ChainId.POLYGON_MUMBAI:
        case ChainId.BNB_TESTNET:
        case ChainId.ARBITRUM_ONE:
        case ChainId.ARBITRUM_GOERLI:
        case ChainId.AVALANCHE:
        case ChainId.GOERLI:
            return ProviderName.INFURA;
        case ChainId.CELO:
        case ChainId.BNB:
        case ChainId.BASE:
            return ProviderName.QUIKNODE;
        case ChainId.CELO_ALFAJORES:
            return ProviderName.FORNO;
        default:
            return ProviderName.UNKNOWN;
    }
};
export class RpcProvidersWidgetsFactory {
    constructor(namespace, region, chains) {
        this.namespace = namespace;
        this.region = region;
        this.chains = chains;
    }
    generateWidgets() {
        return this.generateWidgetsForMethod('CALL')
            .concat(this.generateWidgetsForMethod('GETBLOCKNUMBER'))
            .concat(this.generateWidgetsForMethod('GETGASPRICE'))
            .concat(this.generateWidgetsForMethod('GETNETWORK'))
            .concat(this.generateWidgetsForMethod('RESOLVENAME'));
    }
    generateWidgetsForMethod(rpcMethod) {
        return this.generateRequestsWidgetForMethod(rpcMethod).concat(this.generateSuccessRateForMethod(rpcMethod));
    }
    generateSuccessRateForMethod(rpcMethod) {
        const chainsWithIndices = this.chains.map((chainId, index) => {
            return { chainId: chainId, index: index };
        });
        const metrics = _.flatMap(chainsWithIndices, (chainIdAndIndex) => {
            const chainId = chainIdAndIndex.chainId;
            const index = chainIdAndIndex.index;
            const providerName = ID_TO_PROVIDER(chainId);
            const metric1 = `m${index * 2 + 1}`;
            const metric2 = `m${index * 2 + 2}`;
            const expression = `e${index}`;
            return [
                [
                    {
                        expression: `${metric1} / (${metric1} + ${metric2}) * 100`,
                        label: `RPC ${providerName} Chain ${ID_TO_NETWORK_NAME(chainId)} ${rpcMethod} Success Rate`,
                        id: expression,
                    },
                ],
                [
                    this.namespace,
                    `RPC_${providerName}_${chainId}_${rpcMethod}_SUCCESS`,
                    'Service',
                    'RoutingAPI',
                    {
                        id: metric1,
                        visible: false,
                    },
                ],
                [
                    this.namespace,
                    `RPC_${providerName}_${chainId}_${rpcMethod}_FAILURE`,
                    'Service',
                    'RoutingAPI',
                    {
                        id: metric2,
                        visible: false,
                    },
                ],
            ];
        });
        return [
            {
                height: 10,
                width: 12,
                type: 'metric',
                properties: {
                    metrics: metrics,
                    view: 'timeSeries',
                    stacked: false,
                    region: this.region,
                    stat: 'SampleCount',
                    period: 300,
                    title: `RPC ${rpcMethod} Success Rate`,
                },
            },
        ];
    }
    generateRequestsWidgetForMethod(rpcMethod) {
        const chainsWithIndices = this.chains.map((chainId, index) => {
            return { chainId: chainId, index: index };
        });
        const metrics = _.flatMap(chainsWithIndices, (chainIdAndIndex) => {
            const chainId = chainIdAndIndex.chainId;
            const providerName = ID_TO_PROVIDER(chainId);
            return [
                [this.namespace, `RPC_${providerName}_${chainId}_${rpcMethod}_SUCCESS`, 'Service', 'RoutingAPI'],
                [this.namespace, `RPC_${providerName}_${chainId}_${rpcMethod}_FAILURE`, 'Service', 'RoutingAPI'],
            ];
        });
        return [
            {
                height: 10,
                width: 12,
                type: 'metric',
                properties: {
                    metrics: metrics,
                    view: 'timeSeries',
                    stacked: true,
                    region: this.region,
                    stat: 'SampleCount',
                    period: 300,
                    title: `RPC ${rpcMethod} Requests`,
                },
            },
        ];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnBjLXByb3ZpZGVycy13aWRnZXRzLWZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvZGFzaGJvYXJkcy9ycGMtcHJvdmlkZXJzLXdpZGdldHMtZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFDM0MsT0FBTyxDQUFDLE1BQU0sUUFBUSxDQUFBO0FBQ3RCLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG9EQUFvRCxDQUFBO0FBQ3ZGLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQTtBQUVwRSxNQUFNLGNBQWMsR0FBRyxDQUFDLEVBQVcsRUFBVSxFQUFFO0lBQzdDLFFBQVEsRUFBRSxFQUFFO1FBQ1YsS0FBSyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBQ3JCLEtBQUssT0FBTyxDQUFDLFFBQVEsQ0FBQztRQUN0QixLQUFLLE9BQU8sQ0FBQyxPQUFPLENBQUM7UUFDckIsS0FBSyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBQ3JCLEtBQUssT0FBTyxDQUFDLGNBQWMsQ0FBQztRQUM1QixLQUFLLE9BQU8sQ0FBQyxXQUFXLENBQUM7UUFDekIsS0FBSyxPQUFPLENBQUMsWUFBWSxDQUFDO1FBQzFCLEtBQUssT0FBTyxDQUFDLGVBQWUsQ0FBQztRQUM3QixLQUFLLE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFDdkIsS0FBSyxPQUFPLENBQUMsTUFBTTtZQUNqQixPQUFPLFlBQVksQ0FBQyxNQUFNLENBQUE7UUFDNUIsS0FBSyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQ2xCLEtBQUssT0FBTyxDQUFDLEdBQUcsQ0FBQztRQUNqQixLQUFLLE9BQU8sQ0FBQyxJQUFJO1lBQ2YsT0FBTyxZQUFZLENBQUMsUUFBUSxDQUFBO1FBQzlCLEtBQUssT0FBTyxDQUFDLGNBQWM7WUFDekIsT0FBTyxZQUFZLENBQUMsS0FBSyxDQUFBO1FB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LElBQUksRUFBRSxZQUFZO29CQUNsQixPQUFPLEVBQUUsSUFBSTtvQkFDYixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07b0JBQ25CLElBQUksRUFBRSxhQUFhO29CQUNuQixNQUFNLEVBQUUsR0FBRztvQkFDWCxLQUFLLEVBQUUsT0FBTyxTQUFTLFdBQVc7aUJBQ25DO2FBQ0Y7U0FDRixDQUFBO0lBQ0gsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgV2lkZ2V0c0ZhY3RvcnkgfSBmcm9tICcuL2NvcmUvd2lkZ2V0cy1mYWN0b3J5J1xuaW1wb3J0IHsgV2lkZ2V0IH0gZnJvbSAnLi9jb3JlL21vZGVsL3dpZGdldCdcbmltcG9ydCB7IENoYWluSWQgfSBmcm9tICdAdW5pc3dhcC9zZGstY29yZSdcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCdcbmltcG9ydCB7IElEX1RPX05FVFdPUktfTkFNRSB9IGZyb20gJ0B1bmlzd2FwL3NtYXJ0LW9yZGVyLXJvdXRlci9idWlsZC9tYWluL3V0aWwvY2hhaW5zJ1xuaW1wb3J0IHsgUHJvdmlkZXJOYW1lIH0gZnJvbSAnLi4vaGFuZGxlcnMvZXZtL3Byb3ZpZGVyL1Byb3ZpZGVyTmFtZSdcblxuY29uc3QgSURfVE9fUFJPVklERVIgPSAoaWQ6IENoYWluSWQpOiBzdHJpbmcgPT4ge1xuICBzd2l0Y2ggKGlkKSB7XG4gICAgY2FzZSBDaGFpbklkLk1BSU5ORVQ6XG4gICAgY2FzZSBDaGFpbklkLk9QVElNSVNNOlxuICAgIGNhc2UgQ2hhaW5JZC5TRVBPTElBOlxuICAgIGNhc2UgQ2hhaW5JZC5QT0xZR09OOlxuICAgIGNhc2UgQ2hhaW5JZC5QT0xZR09OX01VTUJBSTpcbiAgICBjYXNlIENoYWluSWQuQk5CX1RFU1RORVQ6XG4gICAgY2FzZSBDaGFpbklkLkFSQklUUlVNX09ORTpcbiAgICBjYXNlIENoYWluSWQuQVJCSVRSVU1fR09FUkxJOlxuICAgIGNhc2UgQ2hhaW5JZC5BVkFMQU5DSEU6XG4gICAgY2FzZSBDaGFpbklkLkdPRVJMSTpcbiAgICAgIHJldHVybiBQcm92aWRlck5hbWUuSU5GVVJBXG4gICAgY2FzZSBDaGFpbklkLkNFTE86XG4gICAgY2FzZSBDaGFpbklkLkJOQjpcbiAgICBjYXNlIENoYWluSWQuQkFTRTpcbiAgICAgIHJldHVybiBQcm92aWRlck5hbWUuUVVJS05PREVcbiAgICBjYXNlIENoYWluSWQuQ0VMT19BTEZBSk9SRVM6XG4gICAgICByZXR1cm4gUHJvdmlkZXJOYW1lLkZPUk5PXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBQcm92aWRlck5hbWUuVU5LTk9XTlxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBScGNQcm92aWRlcnNXaWRnZXRzRmFjdG9yeSBpbXBsZW1lbnRzIFdpZGdldHNGYWN0b3J5IHtcbiAgcmVnaW9uOiBzdHJpbmdcbiAgbmFtZXNwYWNlOiBzdHJpbmdcbiAgY2hhaW5zOiBBcnJheTxDaGFpbklkPlxuXG4gIGNvbnN0cnVjdG9yKG5hbWVzcGFjZTogc3RyaW5nLCByZWdpb246IHN0cmluZywgY2hhaW5zOiBBcnJheTxDaGFpbklkPikge1xuICAgIHRoaXMubmFtZXNwYWNlID0gbmFtZXNwYWNlXG4gICAgdGhpcy5yZWdpb24gPSByZWdpb25cbiAgICB0aGlzLmNoYWlucyA9IGNoYWluc1xuICB9XG5cbiAgZ2VuZXJhdGVXaWRnZXRzKCk6IFdpZGdldFtdIHtcbiAgICByZXR1cm4gdGhpcy5nZW5lcmF0ZVdpZGdldHNGb3JNZXRob2QoJ0NBTEwnKVxuICAgICAgLmNvbmNhdCh0aGlzLmdlbmVyYXRlV2lkZ2V0c0Zvck1ldGhvZCgnR0VUQkxPQ0tOVU1CRVInKSlcbiAgICAgIC5jb25jYXQodGhpcy5nZW5lcmF0ZVdpZGdldHNGb3JNZXRob2QoJ0dFVEdBU1BSSUNFJykpXG4gICAgICAuY29uY2F0KHRoaXMuZ2VuZXJhdGVXaWRnZXRzRm9yTWV0aG9kKCdHRVRORVRXT1JLJykpXG4gICAgICAuY29uY2F0KHRoaXMuZ2VuZXJhdGVXaWRnZXRzRm9yTWV0aG9kKCdSRVNPTFZFTkFNRScpKVxuICB9XG5cbiAgcHJpdmF0ZSBnZW5lcmF0ZVdpZGdldHNGb3JNZXRob2QocnBjTWV0aG9kOiBzdHJpbmcpOiBXaWRnZXRbXSB7XG4gICAgcmV0dXJuIHRoaXMuZ2VuZXJhdGVSZXF1ZXN0c1dpZGdldEZvck1ldGhvZChycGNNZXRob2QpLmNvbmNhdCh0aGlzLmdlbmVyYXRlU3VjY2Vzc1JhdGVGb3JNZXRob2QocnBjTWV0aG9kKSlcbiAgfVxuXG4gIHByaXZhdGUgZ2VuZXJhdGVTdWNjZXNzUmF0ZUZvck1ldGhvZChycGNNZXRob2Q6IHN0cmluZyk6IFdpZGdldFtdIHtcbiAgICBjb25zdCBjaGFpbnNXaXRoSW5kaWNlcyA9IHRoaXMuY2hhaW5zLm1hcCgoY2hhaW5JZCwgaW5kZXgpID0+IHtcbiAgICAgIHJldHVybiB7IGNoYWluSWQ6IGNoYWluSWQsIGluZGV4OiBpbmRleCB9XG4gICAgfSlcbiAgICBjb25zdCBtZXRyaWNzID0gXy5mbGF0TWFwKGNoYWluc1dpdGhJbmRpY2VzLCAoY2hhaW5JZEFuZEluZGV4KSA9PiB7XG4gICAgICBjb25zdCBjaGFpbklkID0gY2hhaW5JZEFuZEluZGV4LmNoYWluSWRcbiAgICAgIGNvbnN0IGluZGV4ID0gY2hhaW5JZEFuZEluZGV4LmluZGV4XG4gICAgICBjb25zdCBwcm92aWRlck5hbWUgPSBJRF9UT19QUk9WSURFUihjaGFpbklkKVxuXG4gICAgICBjb25zdCBtZXRyaWMxID0gYG0ke2luZGV4ICogMiArIDF9YFxuICAgICAgY29uc3QgbWV0cmljMiA9IGBtJHtpbmRleCAqIDIgKyAyfWBcbiAgICAgIGNvbnN0IGV4cHJlc3Npb24gPSBgZSR7aW5kZXh9YFxuXG4gICAgICByZXR1cm4gW1xuICAgICAgICBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXhwcmVzc2lvbjogYCR7bWV0cmljMX0gLyAoJHttZXRyaWMxfSArICR7bWV0cmljMn0pICogMTAwYCxcbiAgICAgICAgICAgIGxhYmVsOiBgUlBDICR7cHJvdmlkZXJOYW1lfSBDaGFpbiAke0lEX1RPX05FVFdPUktfTkFNRShjaGFpbklkKX0gJHtycGNNZXRob2R9IFN1Y2Nlc3MgUmF0ZWAsXG4gICAgICAgICAgICBpZDogZXhwcmVzc2lvbixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBbXG4gICAgICAgICAgdGhpcy5uYW1lc3BhY2UsXG4gICAgICAgICAgYFJQQ18ke3Byb3ZpZGVyTmFtZX1fJHtjaGFpbklkfV8ke3JwY01ldGhvZH1fU1VDQ0VTU2AsXG4gICAgICAgICAgJ1NlcnZpY2UnLFxuICAgICAgICAgICdSb3V0aW5nQVBJJyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZDogbWV0cmljMSxcbiAgICAgICAgICAgIHZpc2libGU6IGZhbHNlLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICB0aGlzLm5hbWVzcGFjZSxcbiAgICAgICAgICBgUlBDXyR7cHJvdmlkZXJOYW1lfV8ke2NoYWluSWR9XyR7cnBjTWV0aG9kfV9GQUlMVVJFYCxcbiAgICAgICAgICAnU2VydmljZScsXG4gICAgICAgICAgJ1JvdXRpbmdBUEknLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkOiBtZXRyaWMyLFxuICAgICAgICAgICAgdmlzaWJsZTogZmFsc2UsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIF1cbiAgICB9KVxuXG4gICAgcmV0dXJuIFtcbiAgICAgIHtcbiAgICAgICAgaGVpZ2h0OiAxMCxcbiAgICAgICAgd2lkdGg6IDEyLFxuICAgICAgICB0eXBlOiAnbWV0cmljJyxcbiAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgIG1ldHJpY3M6IG1ldHJpY3MsXG4gICAgICAgICAgdmlldzogJ3RpbWVTZXJpZXMnLFxuICAgICAgICAgIHN0YWNrZWQ6IGZhbHNlLFxuICAgICAgICAgIHJlZ2lvbjogdGhpcy5yZWdpb24sXG4gICAgICAgICAgc3RhdDogJ1NhbXBsZUNvdW50JyxcbiAgICAgICAgICBwZXJpb2Q6IDMwMCxcbiAgICAgICAgICB0aXRsZTogYFJQQyAke3JwY01ldGhvZH0gU3VjY2VzcyBSYXRlYCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgXVxuICB9XG5cbiAgcHJpdmF0ZSBnZW5lcmF0ZVJlcXVlc3RzV2lkZ2V0Rm9yTWV0aG9kKHJwY01ldGhvZDogc3RyaW5nKTogV2lkZ2V0W10ge1xuICAgIGNvbnN0IGNoYWluc1dpdGhJbmRpY2VzID0gdGhpcy5jaGFpbnMubWFwKChjaGFpbklkLCBpbmRleCkgPT4ge1xuICAgICAgcmV0dXJuIHsgY2hhaW5JZDogY2hhaW5JZCwgaW5kZXg6IGluZGV4IH1cbiAgICB9KVxuICAgIGNvbnN0IG1ldHJpY3MgPSBfLmZsYXRNYXAoY2hhaW5zV2l0aEluZGljZXMsIChjaGFpbklkQW5kSW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IGNoYWluSWQgPSBjaGFpbklkQW5kSW5kZXguY2hhaW5JZFxuICAgICAgY29uc3QgcHJvdmlkZXJOYW1lID0gSURfVE9fUFJPVklERVIoY2hhaW5JZClcblxuICAgICAgcmV0dXJuIFtcbiAgICAgICAgW3RoaXMubmFtZXNwYWNlLCBgUlBDXyR7cHJvdmlkZXJOYW1lfV8ke2NoYWluSWR9XyR7cnBjTWV0aG9kfV9TVUNDRVNTYCwgJ1NlcnZpY2UnLCAnUm91dGluZ0FQSSddLFxuICAgICAgICBbdGhpcy5uYW1lc3BhY2UsIGBSUENfJHtwcm92aWRlck5hbWV9XyR7Y2hhaW5JZH1fJHtycGNNZXRob2R9X0ZBSUxVUkVgLCAnU2VydmljZScsICdSb3V0aW5nQVBJJ10sXG4gICAgICBdXG4gICAgfSlcblxuICAgIHJldHVybiBbXG4gICAgICB7XG4gICAgICAgIGhlaWdodDogMTAsXG4gICAgICAgIHdpZHRoOiAxMixcbiAgICAgICAgdHlwZTogJ21ldHJpYycsXG4gICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICBtZXRyaWNzOiBtZXRyaWNzLFxuICAgICAgICAgIHZpZXc6ICd0aW1lU2VyaWVzJyxcbiAgICAgICAgICBzdGFja2VkOiB0cnVlLFxuICAgICAgICAgIHJlZ2lvbjogdGhpcy5yZWdpb24sXG4gICAgICAgICAgc3RhdDogJ1NhbXBsZUNvdW50JyxcbiAgICAgICAgICBwZXJpb2Q6IDMwMCxcbiAgICAgICAgICB0aXRsZTogYFJQQyAke3JwY01ldGhvZH0gUmVxdWVzdHNgLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICBdXG4gIH1cbn1cbiJdfQ==